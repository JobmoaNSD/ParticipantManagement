<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="DashboardDAO">

    <sql id="sortByColumn">
        <if test="sortColumn != null and sortColumn != ''">
            ORDER BY
            <choose>
                <when test="sortColumn == 'dashBoardUserName-th'">
                    dashBoardUserName
                </when>
                <when test="sortColumn == 'dashboardBranch-th'">
                    dashboardBranch
                </when>
                <when test="sortColumn == 'dashboardByYearCount1-th'">
                    dashboardByYearCount1
                </when>
                <when test="sortColumn == 'dashboardByYearCount2-th'">
                    dashboardByYearCount2
                </when>
                <when test="sortColumn == 'dashboardByYearCount3-th'">
                    dashboardByYearCount3
                </when>
                <when test="sortColumn == 'dashboardTotalCount-th'">
                    dashboardTotalCount
                </when>
                <when test="sortColumn == 'totalCompleted-th'">
                    totalCompleted
                </when>
                <when test="sortColumn == 'totalEmployed-th'">
                    totalEmployed
                </when>
                <when test="sortColumn == 'specialGroupCount-th'">
                    specialGroupCount
                </when>
                <when test="sortColumn == 'totalEmployedSpecialGroupCount-th'">
                    totalEmployedSpecialGroupCount
                </when>
                <when test="sortColumn == 'employmentRate-th'">
                    employmentRate
                </when>
                <when test="sortColumn == 'referredEmploymentCount-th'">
                    referredEmploymentCount
                </when>
                <when test="sortColumn == 'placementRate-th'">
                    placementRate
                </when>
                <when test="sortColumn == 'betterJobCount-th'">
                    betterJobCount
                </when>
                <when test="sortColumn == 'betterJobRate-th'">
                    betterJobRate
                </when>
                <when test="sortColumn == 'earlyEmploymentCount-th'">
                    earlyEmploymentCount
                </when>
                <when test="sortColumn == 'earlyEmploymentRate-th'">
                    earlyEmploymentRate
                </when>
                <when test="sortColumn == 'employmentScore-th'">
                    employmentScore
                </when>
                <when test="sortColumn == 'placementScore-th'">
                    placementScore
                </when>
                <when test="sortColumn == 'betterJobScore-th'">
                    betterJobScore
                </when>
                <when test="sortColumn == 'earlyEmploymentScore-th'">
                    earlyEmploymentScore
                </when>
                <when test="sortColumn == 'retentionScore-th'">
                    retentionScore
                </when>
                <when test="sortColumn == 'totalScore-th'">
                    totalScore
                </when>
                <otherwise>
                    totalScore  <!-- 기본 정렬 컬럼 -->
                </otherwise>
            </choose>

            <!-- 정렬 방향 -->
            <choose>
                <when test="sortType != null and sortType.toUpperCase() == 'ASC'">
                    ASC
                </when>
                <otherwise>
                    DESC  <!-- 기본 정렬: 내림차순 -->
                </otherwise>
            </choose>
        </if>
    </sql>



    <!-- Main DashBoard 시작 -->
    <select id="myKPIDashboard" resultType="dashboard">
        SELECT
            지점 AS dashboardBranch,
            전담자_계정 AS dashboardUserID,
            종료자수 AS totalCompleted,
            취업자수 AS totalEmployed,
            취업률 AS employmentRate,
            알선취업자수 AS referredEmploymentCount,
            알선취업률 AS placementRate,
            조기취업자수 AS earlyEmploymentCount,
            조기취업률 AS earlyEmploymentRate,
            나은일자리수 AS betterJobCount,
            나은일자리률 AS betterJobRate,
            배정인원수 AS assignedParticipants,
            서비스미제공 AS noServiceCount,
            미해당 AS falseCaseNum,
            해당 AS trueCaseNum,
            (
                SELECT AVG(취업률)
                FROM (
                         SELECT 취업률,
                                NTILE(100) OVER (ORDER BY 취업률) AS percentile
                         FROM KPI달성률
                         WHERE 전담자_계정 IS NOT NULL
                     ) AS subquery
                WHERE percentile BETWEEN 15 AND 85
            ) AS avgEmploymentRateMiddle,
            (
                SELECT AVG(알선취업률)
                FROM (
                         SELECT 알선취업률,
                                NTILE(100) OVER (ORDER BY 알선취업률) AS percentile
                         FROM KPI달성률
                         WHERE 전담자_계정 IS NOT NULL
                     ) AS subquery
                WHERE percentile BETWEEN 15 AND 85
            ) AS avgPlacementRateMiddle,
            (
                SELECT AVG(조기취업률)
                FROM (
                         SELECT 조기취업률,
                                NTILE(100) OVER (ORDER BY 조기취업률) AS percentile
                         FROM KPI달성률
                         WHERE 전담자_계정 IS NOT NULL
                     ) AS subquery
                WHERE percentile BETWEEN 15 AND 85
            ) AS avgEarlyEmploymentRateMiddle,
            (
                SELECT AVG(나은일자리률)
                FROM (
                         SELECT 나은일자리률,
                                NTILE(100) OVER (ORDER BY 나은일자리률) AS percentile
                         FROM KPI달성률
                         WHERE 전담자_계정 IS NOT NULL
                     ) AS subquery
                WHERE percentile BETWEEN 15 AND 85
            ) AS avgBetterJobRateMiddle
        FROM
            KPI달성률
        WHERE
            전담자_계정 = #{dashboardUserID}
    </select>

    <!-- 성공금 데이터 추출 시작 -->
    <!-- 성공금 개인 데이터 추출 시작 -->
    <select id="selectSuccessMoney" resultType="dashboard">
        SELECT
            -- 전체 성공금 인센티브
            ISNULL(SUM(CONVERT(BIGINT, 성공금)),0)                                       AS dashBoardSuccessMoneyTotal,
            ISNULL(SUM(CONVERT(BIGINT, 인센티브)),0)                                      AS dashBoardSuccessMoneyTotalIncentive,
            -- 지점 성공금 인센티브
            ISNULL(SUM(IIF(지점 = #{dashboardBranch}, CONVERT(BIGINT, 성공금), 0)),0)      AS dashBoardSuccessMoneyBranch,
            ISNULL(SUM(IIF(지점 = #{dashboardBranch}, CONVERT(BIGINT, 인센티브), 0)),0)     AS dashBoardSuccessMoneyBranchIncentive,
            -- 개인 성공금 인센티브
            ISNULL(SUM(IIF(전담자_계정 = #{dashboardUserID} AND 지점 = #{dashboardBranch}, CONVERT(BIGINT, 성공금), 0)),0)  AS dashBoardSuccessMoneyUser,
            ISNULL(SUM(IIF(전담자_계정 = #{dashboardUserID} AND 지점 = #{dashboardBranch}, CONVERT(BIGINT, 인센티브), 0)),0) AS dashBoardSuccessMoneyUserIncentive
        FROM SUCCESSMONEY
        WHERE YEAR(IIF(초기상담일 = '1900-01-01', 등록일, ISNULL(초기상담일, ''))) = #{dashBoardYear};
    </select>
    <!-- 성공금 데이터 추출 끝 -->


    <!-- 전체 지점 인원, 현재 지점 인원 -->
    <select id="selectBranchAndUser" resultType="dashboard">
        SELECT
            (SELECT
                 SUM(지점인원)
             FROM
                 J_참여자관리_지점) AS dashboardCountBranch,
            지점인원 AS dashboardCountUser
        FROM
            J_참여자관리_지점
        WHERE 지점 = #{dashboardBranch};
    </select>

    <!-- 참여자 통계 총 참여자 수 시작 -->
    <select id="selectTotalParticipant" resultType="dashboard">
        SELECT
            COUNT(등록일) dashBoardParticipatedCountOne,
            (SELECT COUNT(구직번호) FROM J_참여자관리 WHERE 전담자_계정 = #{dashboardUserID}) dashBoardParticipatedCountTotal,
            YEAR(IIF(초기상담일 = '1900-01-01',등록일,ISNULL(초기상담일,''))) dashBoardParticipatedYear
        FROM
            J_참여자관리
        WHERE
            전담자_계정=#{dashboardUserID} AND
            지점 = #{dashboardBranch} AND
            YEAR(IIF(초기상담일 = '1900-01-01',등록일,ISNULL(초기상담일,''))) <![CDATA[<=]]> #{dashBoardYear}
        GROUP BY YEAR(IIF(초기상담일 = '1900-01-01',등록일,ISNULL(초기상담일,'')))
        ORDER BY YEAR(IIF(초기상담일 = '1900-01-01',등록일,ISNULL(초기상담일,''))) DESC
    </select>
    <!-- 참여자 통계 총 참여자 수 끝 -->

    <!-- 참여자 통계 현재 진행자 수 시작 -->
    <select id="selectCurrentParticipant" resultType="dashboard">
        SELECT
            COUNT(등록일) dashBoardParticipatedCountOne,
            (SELECT COUNT(구직번호) FROM J_참여자관리 WHERE 전담자_계정 = #{dashboardUserID} AND 마감 = 'false' AND 진행단계 IN ('1', '2', '3', '미취업사후관리', 'IAP 전', 'IAP 후','유예')) dashBoardParticipatedCountTotal,
            YEAR(IIF(초기상담일 = '1900-01-01', 등록일, ISNULL(초기상담일, ''))) dashBoardParticipatedYear
        FROM
            J_참여자관리
        WHERE
            전담자_계정=#{dashboardUserID} AND
            지점 = #{dashboardBranch} AND
            마감 = 'false' AND
            진행단계 IN ('1','2','3','미취업사후관리','IAP 전','IAP 후','유예') AND
            YEAR(IIF(초기상담일 = '1900-01-01', 등록일, ISNULL(초기상담일, ''))) <![CDATA[<=]]> #{dashBoardYear}
        GROUP BY YEAR(IIF(초기상담일 = '1900-01-01', 등록일, ISNULL(초기상담일, '')))
        ORDER BY YEAR(IIF(초기상담일 = '1900-01-01', 등록일, ISNULL(초기상담일, ''))) DESC
    </select>
    <!-- 참여자 통계 현재 진행자 수 끝 -->

    <!-- 참여자 통계 현재 년도 참여자 수 시작 -->
    <select id="selectNowParticipant" resultType="dashboard">
        SELECT
            ISNULL(SUM(IIF(참여유형 = '1', 1, 0)), 0) AS dashBoardParticipatedCountOne,
            ISNULL(SUM(IIF(참여유형 = '2', 1, 0)), 0) AS dashBoardParticipatedCountTwo,
            COUNT(구직번호) AS dashBoardParticipatedCountTotal,
            YEAR(IIF(초기상담일 = '1900-01-01', 등록일, ISNULL(초기상담일, ''))) AS dashBoardParticipatedYear
        FROM J_참여자관리
        WHERE 전담자_계정 = #{dashboardUserID} AND 지점 = #{dashboardBranch}
          AND 마감 = 'false'
--           AND 진행단계 IN ('1','2','3','미취업사후관리','IAP 전','IAP 후','유예') -- 현재 참여자 수 구할때 주석 제거
          AND YEAR(IIF(초기상담일 = '1900-01-01', 등록일, ISNULL(초기상담일, ''))) <![CDATA[=]]> #{dashBoardYear}
        GROUP BY YEAR(IIF(초기상담일 = '1900-01-01', 등록일, ISNULL(초기상담일, '')))
        ORDER BY YEAR(IIF(초기상담일 = '1900-01-01', 등록일, ISNULL(초기상담일, ''))) DESC
    </select>
    <!-- 참여자 통계 현재 년도 참여자 수 끝 -->

    <!-- 전담자 금일 업무 현황 시작 -->
    <select id="selectDailyDashboard" resultType="dashboard">
        --21일 기준 최근상담일,
        --15일 기준 구직만료일, 기간만료일 전체 데이터
        SELECT
            -- 최근 상담일 21일 도래자
            SUM(IIF(DATEDIFF(DAY, 최근상담일, GETDATE()) <![CDATA[>=]]> 21 AND 최근상담일 <![CDATA[<>]]> '', 1, 0)) AS dashBoardLastCons,
            -- 구직 만료일 15일 도래자
            SUM(IIF(DATEDIFF(DAY, GETDATE(), 구직만료일) <![CDATA[<=]]> 15 AND 구직만료일 <![CDATA[<>]]> '', 1, 0)) AS dashBoardJobEX,
            -- 기간 만료일 15일 도래자
            SUM(IIF(DATEDIFF(DAY, GETDATE(), 기간만료일) <![CDATA[<=]]> 15 AND 기간만료일 <![CDATA[<>]]> '' AND 최근상담일 <![CDATA[<>]]> '', 1, 0))                           AS dashBoardEXPDate,
            -- 초기상담 미실시자
            SUM(IIF(초기상담일 = '', 1, 0)) AS dashBoardInItCons
        FROM J_참여자관리
        WHERE 전담자_계정 = #{dashboardUserID}
          AND 지점 = #{dashboardBranch}
          AND (마감 = 'false' OR 마감 = '')
    </select>
    <!-- 전담자 금일 업무 현황 끝 -->

    <!-- 전담자 취업자,취업률 조회 시작 -->
    <select id="selectEmploymentRate" resultType="dashboard">
        WITH 날짜_전처리 AS (
        SELECT
            전담자_계정,
            취창업일,
            진행단계,
            지점,
            등록일,
            -- 유효한 날짜 계산을 CTE로 분리
            CASE
                WHEN 취창업일 > '1900-01-01' AND 기간만료일 > '1900-01-01' THEN COALESCE(취창업일, 기간만료일)
                WHEN 취창업일 > '1900-01-01' THEN 취창업일
                WHEN 기간만료일 > '1900-01-01' THEN 기간만료일
                ELSE NULL
            END AS 유효날짜
        FROM J_참여자관리
        WHERE 전담자_계정 = #{dashboardUserID}
        ),
        조건_필터 AS (
        SELECT
            전담자_계정,
            취창업일,
            진행단계,
            -- 조건을 명확하게 분리
            CASE
            WHEN 지점 IN ('인천', '성남') AND 등록일 BETWEEN '2025-01-01' AND '2025-10-31' THEN 1
            WHEN 지점 IN ('서부', '남부', '부천', '수원', '의정부',
            '인천남부', '동대문', '광명', '안양', '북부',
            '천호', '관악') AND 유효날짜 BETWEEN '2024-11-01' AND '2025-10-31' THEN 1
            ELSE 0
            END AS 조건충족여부
        FROM 날짜_전처리
        )
        SELECT
            전담자_계정,
            SUM(CASE WHEN 취창업일 <![CDATA[<>]]> '' THEN 1 ELSE 0 END) AS dashBoardEarlyEmployedCountUser,
            -- 0으로 나누기 방지 및 백분율 계산
            CASE
                WHEN SUM(CASE WHEN 진행단계 NOT IN ('유예', '취소') THEN 1 ELSE 0 END) = 0
                THEN 0
            ELSE ROUND(
                CAST(SUM(CASE WHEN 취창업일 <![CDATA[<>]]> '' THEN 1 ELSE 0 END) AS FLOAT)
                / SUM(CASE WHEN 진행단계 NOT IN ('유예', '취소') THEN 1 ELSE 0 END)
                * 100, 2)
            END AS employmentRate
        FROM 조건_필터
        WHERE 조건충족여부 = 1
        GROUP BY 전담자_계정;
    </select>
    <!-- 전담자 취업자,취업률 조회 끝 -->

    <!-- 성공금 현황 시작 -->
    <select id="selectSuccessMoneyDetails" resultType="dashboard">
        SELECT TOP(100)
            A.구직번호 AS dashBoardJobNo,
            A.등록일 AS dashBoardDate,
            A.참여자 AS dashBoardPartic,
            A.전담자_계정 AS dashBoardUserID,
            B.이름 AS dashBoardUserName,
            A.지점 AS dashBoardUserBranch,
            A.성공금 AS dashBoardSuccessMoney,
            A.인센티브 AS dashBoardIncentive
        FROM SUCCESSMONEY A
                 RIGHT JOIN J_참여자관리_로그인정보 B
                            ON A.전담자_계정 = B.아이디 AND (아이디사용여부 NOT IN ('퇴사','정지','잠금') OR 아이디사용여부 IS NULL OR 아이디사용여부 = '')
        WHERE
            A.성공금 <![CDATA[<>]]> '' AND
            A.전담자_계정 = #{dashboardUserID} AND
            A.지점=#{dashBoardUserBranch};
    </select>
    <!-- 성공금 현황 끝 -->

    <!-- 지점 관리자 대시보드 지점별 성공금 현황 시작 -->
    <select id="selectBranchManagementMoney" resultType="dashboard">
        SELECT ISNULL(A.지점, '전체 지점')                                     AS dashboardBranch,
               ISNULL(SUM(IIF(취창업일 <![CDATA[>=]]> DATEADD(YEAR, -1, #{dashBoardStartDate}) AND 취창업일 <![CDATA[<=]]> DATEADD(YEAR, -1, #{dashBoardEndDate}),
                              ISNULL(CONVERT(BIGINT, 성공금), 0), 0)),0) AS lastYearMoney,
               ISNULL(SUM(IIF(취창업일 <![CDATA[>=]]> #{dashBoardStartDate} AND 취창업일 <![CDATA[<=]]> #{dashBoardEndDate},
                              ISNULL(CONVERT(BIGINT, 성공금), 0), 0)), 0) AS currentYearMoney
        FROM SUCCESSMONEY A
                 RIGHT JOIN J_참여자관리_지점 B
                            ON A.지점 = B.지점
        WHERE A.지점 <![CDATA[<>]]> '테스트'
        GROUP BY A.지점 WITH ROLLUP
        ORDER BY IIF(A.지점 IS NULL, 0, 1);
    </select>
    <!-- 지점 관리자 대시보드 지점별 성공금 현황 끝 -->

    <!-- 지점 관리자 대시보드 지점별 인센 현황 시작 -->
    <select id="selectBranchInventiveStatus" resultType="dashboard">
        SELECT
            ISNULL(A.지점, '전체 지점') AS dashboardBranch,
            ISNULL(SUM(IIF(취업인센티브_구분 LIKE '%해당%',1,0)),0) AS trueCaseNum,
            ISNULL(SUM(IIF(취업인센티브_구분 LIKE '%미해당%' AND 취업인센티브_구분 NOT LIKE '%서비스 미제공%',1,0)),0) AS falseCaseNum,
            ISNULL(SUM(IIF(취업인센티브_구분 LIKE '%서비스 미제공%',1,0)),0) AS noServiceCount
        FROM
            SUCCESSMONEY A
                RIGHT JOIN J_참여자관리_지점 B
                           ON A.지점 = B.지점
        WHERE A.지점 <![CDATA[<>]]> '테스트' AND
            취창업일 <![CDATA[>=]]> #{dashBoardStartDate} AND 취창업일 <![CDATA[<=]]> #{dashBoardEndDate}
        GROUP BY A.지점 WITH ROLLUP
        ORDER BY IIF(A.지점 IS NULL, 0, 1);
    </select>
    <!-- 지점 관리자 대시보드 지점별 인센 현황 끝 -->

    <!-- 지점 관리자 대시보드 지점별 인센 미해당 현황 시작 -->
    <select id="selectBranchInventiveFalseStatus" resultType="dashboard">
        SELECT
            ISNULL(B.사업부,'전체 지점'),
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%서비스 미제공%' THEN 1 ELSE 0 END) as noServiceCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%1개월 미만 퇴사%' THEN 1 ELSE 0 END) as lessThanOneMonthCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%파견업체%' THEN 1 ELSE 0 END) as dispatchCompanyCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%IAP수립 후 7일이내 취업%' THEN 1 ELSE 0 END) as iapSevenDaysCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%주 30시간 미만%' THEN 1 ELSE 0 END) as underThirtyHoursCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%최저임금 미만%' THEN 1 ELSE 0 END) as underMinWageCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%기타(해외취업포함)%' THEN 1 ELSE 0 END) as etcCount
        FROM SUCCESSMONEY A
                 RIGHT JOIN J_참여자관리_지점 B
                            ON A.지점 = B.지점
        WHERE
            A.지점 <![CDATA[<>]]> '테스트' AND
            A.취창업일 <![CDATA[>=]]> #{dashBoardStartDate}
          AND A.취창업일 <![CDATA[<=]]> #{dashBoardEndDate}
          AND B.사업부 <![CDATA[<>]]> ''
          AND A.취업인센티브_구분 LIKE '%미해당%'
        GROUP BY B.사업부 WITH ROLLUP
        ORDER BY B.사업부
    </select>
    <!-- 지점 관리자 대시보드 지점별 인센 현황 끝 -->


    <!-- 비동기 지점 상담사별 성공금 금액 확인용 쿼리 -->
    <select id="selectCounselSuccessMoney" resultType="dashboard">
        SELECT
            A.지점 AS dashBoardUserBranch,
            B.이름 AS dashBoardUserName,
            ISNULL(SUM(A.성공금),0) AS dashBoardSuccessMoney
        FROM
            SUCCESSMONEY A
                RIGHT JOIN
            J_참여자관리_로그인정보 B
            ON A.전담자_계정 = B.아이디
        WHERE
            A.취창업일 <![CDATA[>=]]> #{dashBoardStartDate} AND A.취창업일 <![CDATA[<=]]> #{dashBoardEndDate}
          AND A.지점 = #{dashboardBranch}
        GROUP BY A.지점,B.이름
    </select>
    <!-- 비동기 지점 상담사별 성공금 금액 확인용 쿼리 -->

    <!-- 비동기 지점 관리자 대시보드 지점별 인센 미해당 현황 시작 -->
    <select id="selectAjaxBranchInventiveFalseStatus" resultType="dashboard">
        SELECT
            A.지점 as dashboardBranch,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%서비스 미제공%' THEN 1 ELSE 0 END) as noServiceCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%1개월 미만 퇴사%' THEN 1 ELSE 0 END) as lessThanOneMonthCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%파견업체%' THEN 1 ELSE 0 END) as dispatchCompanyCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%IAP수립 후 7일이내 취업%' THEN 1 ELSE 0 END) as iapSevenDaysCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%주 30시간 미만%' THEN 1 ELSE 0 END) as underThirtyHoursCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%최저임금 미만%' THEN 1 ELSE 0 END) as underMinWageCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%기타(해외취업포함)%' THEN 1 ELSE 0 END) as etcCount
        FROM SUCCESSMONEY A
                 RIGHT JOIN J_참여자관리_지점 B
                            ON A.지점 = B.지점
        WHERE
            A.취창업일 <![CDATA[>=]]> #{dashBoardStartDate} AND A.취창업일 <![CDATA[<=]]> #{dashBoardEndDate}
          AND A.지점 <![CDATA[<>]]> '테스트'
          AND B.사업부 <![CDATA[<>]]> '' AND B.사업부 <![CDATA[=]]> #{businessUnit}
          AND A.취업인센티브_구분 LIKE '%미해당%'
        GROUP BY A.지점
        ORDER BY A.지점 DESC
    </select>
    <!-- 비동기 지점 관리자 대시보드 지점별 인센 미해당 현황 끝 -->

    <!-- 전체, 지점, 내 점수 및 등수 시작 -->
    <!-- 내 점수 및 지점 평균, 총점 평균 출력 -->
    <select id="selectRankAndScore" resultType="dashboard">
        -- 전체지점, 내 지점, 내 점수 구하는 쿼리
        -- 최적화된 쿼리
        WITH 기본데이터 AS (
            SELECT
                A.지점,
                A.이름,
                A.전담자_계정,
                A.총점,
                CASE
                    WHEN DATEDIFF(DAY,
                                  CASE
                                      WHEN L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01' THEN L.입사일
                                      WHEN L.최종발령일 > '1900-01-01' THEN L.최종발령일
                                      ELSE NULL
                                      END,
                                  GETDATE()) >= 365
                        THEN '1년이상'
                    ELSE '1년미만'
                    END AS 근속기간구분,
                CASE WHEN A.전담자_계정 = #{dashboardUserID} THEN 1 ELSE 0 END AS 본인여부
            FROM 평가실적및점수 A
                     INNER JOIN J_참여자관리_로그인정보 L ON A.전담자_계정 = L.아이디 AND (아이디사용여부 NOT IN ('퇴사','정지','잠금') OR 아이디사용여부 IS NULL OR 아이디사용여부 = '')
        ),
             통계_계산 AS (
                 SELECT
                     전담자_계정,
                     총점,
                     지점,
                     근속기간구분,
                     본인여부,
                     -- 순위 계산
                     RANK() OVER (ORDER BY 총점 DESC) AS 전체순위,
                     RANK() OVER (PARTITION BY 지점 ORDER BY 총점 DESC) AS 지점내순위,
                     RANK() OVER (PARTITION BY 근속기간구분 ORDER BY 총점 DESC) AS 근속기간별순위,
                     ROUND(PERCENT_RANK() OVER (PARTITION BY 근속기간구분 ORDER BY 총점 DESC) * 100, 2) AS 근속기간별_퍼센타일,
                     -- 통계값 (중복 제거)
                     COUNT(*) OVER () AS 전체인원수,
                     AVG(CAST(총점 AS FLOAT)) OVER (PARTITION BY 근속기간구분) AS 전체지점평균,
                     SUM(총점) OVER (PARTITION BY 근속기간구분) AS 전체지점합계,
                     MAX(총점) OVER (PARTITION BY 근속기간구분) AS 전체최고점수,
                     COUNT(*) OVER (PARTITION BY 지점) AS 지점인원수,
                     AVG(CAST(총점 AS FLOAT)) OVER (PARTITION BY 지점) AS 내지점평균,
                     SUM(총점) OVER (PARTITION BY 지점) AS 내지점합계,
                     MAX(총점) OVER (PARTITION BY 지점) AS 지점최고점수,
                     COUNT(*) OVER (PARTITION BY 근속기간구분) AS 근속기간별인원수,
                     MAX(총점) OVER (PARTITION BY 근속기간구분) AS 근속기간별최고점수,
                     -- NTILE을 사용한 등급 계산 (더 효율적)
                     NTILE(100) OVER (PARTITION BY 근속기간구분 ORDER BY 총점 DESC) AS 백분위수
                 FROM 기본데이터
                 WHERE 총점 > 0
             ),
             등급정보 AS (
                 SELECT
                     *,
                     -- 등급 및 다음 등급 정보를 한번에 계산
                     CASE
                         WHEN 근속기간구분 = '1년이상' THEN
                             CASE
                                 WHEN 백분위수 <![CDATA[<=]]> 20 THEN 'Master'
                                 WHEN 백분위수 <![CDATA[<=]]> 40 THEN 'Expert'
                                 WHEN 백분위수 <![CDATA[<=]]> 65 THEN 'Skilled'
                                 WHEN 백분위수 <![CDATA[<=]]> 90 THEN 'Developing'
                                 ELSE 'Foundation'
                                 END
                         ELSE
                             CASE
                                 WHEN 백분위수 <![CDATA[<=]]> 20 THEN 'Rising Star'
                                 WHEN 백분위수 <![CDATA[<=]]> 40 THEN 'Pathfinder'
                                 WHEN 백분위수 <![CDATA[<=]]> 65 THEN 'Explorer'
                                 WHEN 백분위수 <![CDATA[<=]]> 90 THEN 'Learner'
                                 ELSE 'Onboard'
                                 END
                         END AS 현재등급,
                     CASE
                         WHEN 근속기간구분 = '1년이상' THEN
                             CASE
                                 WHEN 백분위수 <![CDATA[<=]]> 20 THEN 'Already Top Grade'
                                 WHEN 백분위수 <![CDATA[<=]]> 40 THEN 'Master'
                                 WHEN 백분위수 <![CDATA[<=]]> 65 THEN 'Expert'
                                 WHEN 백분위수 <![CDATA[<=]]> 90 THEN 'Skilled'
                                 ELSE 'Developing'
                                 END
                         ELSE
                             CASE
                                 WHEN 백분위수 <![CDATA[<=]]> 20 THEN 'Already Top Grade'
                                 WHEN 백분위수 <![CDATA[<=]]> 40 THEN 'Rising Star'
                                 WHEN 백분위수 <![CDATA[<=]]> 65 THEN 'Pathfinder'
                                 WHEN 백분위수 <![CDATA[<=]]> 90 THEN 'Explorer'
                                 ELSE 'Learner'
                                 END
                         END AS 다음등급,
                     -- 다음 등급 경계값 계산
                     CASE
                         WHEN 백분위수 <![CDATA[<=]]> 20 THEN NULL
                         WHEN 백분위수 <![CDATA[<=]]> 40 THEN 20
                         WHEN 백분위수 <![CDATA[<=]]> 65 THEN 40
                         WHEN 백분위수 <![CDATA[<=]]> 90 THEN 65
                         ELSE 90
                         END AS 다음등급_백분위수
                 FROM 통계_계산
             )
        SELECT
            e.총점 AS myScore,
            e.전체지점합계 AS totalBranchScore,
            ROUND(e.전체지점평균, 2) AS totalBranchScoreAVG,
            e.전체최고점수 AS totalTopScore,
            e.내지점합계 AS myBranchScore,
            ROUND(e.내지점평균, 2) AS myBranchScoreAVG,
            e.지점최고점수 AS myBranchTopScore,
            e.근속기간별최고점수 AS workPeriodTopScore,
            CONCAT(e.근속기간별순위, '/', e.근속기간별인원수) AS myTotalRanking,
            e.현재등급 AS myRanking,
            -- 다음 등급까지 필요한 점수 (간소화된 계산)
            CASE WHEN e.다음등급_백분위수 IS NULL THEN 0
                 ELSE ISNULL((
                                 SELECT MIN(총점) - e.총점 + 1
                                 FROM 등급정보 s2
                                 WHERE s2.근속기간구분 = e.근속기간구분
                                   AND s2.백분위수 <![CDATA[<=]]> e.다음등급_백분위수
                                   AND s2.총점 > e.총점
                             ), 0)
                END AS pointsToNextGrade,
            e.다음등급 AS nextGrade,
            e.근속기간별_퍼센타일 AS myPercentile,
            e.근속기간구분 AS workPeriod
        FROM 등급정보 e
        WHERE e.본인여부 = 1
    </select>

    <!-- 내 점수 및 인원수, 인원비율 출력 -->
    <select id="selectScoreAndAvg" resultType="dashboard">
        SELECT
            A.지점 AS dashboardBranch,
            A.이름 AS dashboardUserName,
            A.전담자_계정 AS dashboardUserID,
            A.종료자수 AS totalCompleted,
            A.취업자수 AS totalEmployed,
            A.특정계층취업자수 AS specialGroupCount,
            A.취업률 AS employmentRate,
            A.인당취업자점수 AS employmentOneScore,
            A.알선취업자수 AS referredEmploymentCount,
            A.알선취업률 AS placementRate,
            A.인당알선취업자수 AS placementOneScore,
            A.조기취업자수 AS earlyEmploymentCount,
            A.조기취업률 AS earlyEmploymentRate,
            A.인당조기취업자수 AS earlyEmploymentOneScore,
            A.고용유지자수 AS retentionCount,
            A.고용유지취업률 AS retentionRate,
            A.인당고용유지점수 AS retentionOneScore,
            A.나은일자리수 AS betterJobCount,
            A.나은일자리취업률 AS betterJobRate,
            A.인당나은일자리점수 AS betterJobOneScore,
            A.가중취업자점수 AS employmentLastScore,
            A.가중알선취업자점수 AS placementLastScore,
            A.가중조기취업자점수 AS earlyEmploymentLastScore,
            A.가중고용취업자점수 AS retentionLastScore,
            A.가중나은취업자점수 AS betterJobLastScore,
            A.총점 AS totalScore
        FROM 평가실적및점수 A
        WHERE
            A.전담자_계정 =  #{dashboardUserID}
    </select>

    <!-- 지점 평균 및 총점 평균 출력 (1년 미만 상담사 미포함) -->
    <select id="selectBranchAvg" resultType="dashboard">
        WITH 지점순서 AS (
        SELECT
            지점,
            순서
        FROM
            J_참여자관리_지점
        UNION ALL
            SELECT '평균' AS 지점, 0 AS 순서
        ),
        전체점수데이터 AS (
        SELECT
            A.지점,
            A.이름,
            A.전담자_계정,
            A.총점
        <choose>
            <!-- True 1년 미만 인원 포함 False 1년 미만 인원 미포함-->
            <when test="dashboardFlagCondition">
                <choose>
                    <when test="!dashboardExcludeRetention">
                        FROM 고용부평가실적및점수_고용제거 A
                    </when>
                    <otherwise>
                        FROM 고용부평가실적및점수 A
                    </otherwise>
                </choose>
            </when>
            <otherwise>
                <choose>
                    <when test="!dashboardExcludeRetention">
                        FROM 평가실적및점수_고용제거 A
                    </when>
                    <otherwise>
                        FROM 평가실적및점수 A
                    </otherwise>
                </choose>
            </otherwise>
        </choose>
        INNER JOIN J_참여자관리_로그인정보 L ON A.전담자_계정 = L.아이디  AND (아이디사용여부 NOT IN ('퇴사','정지','잠금') OR 아이디사용여부 IS NULL OR 아이디사용여부 = '')
        <choose>
            <!-- True 1년 미만 인원 포함 False 1년 미만 인원 미포함-->
            <when test="!dashboardFlagCondition">
                WHERE L.근속기간구분 <![CDATA[<>]]> '1년미만'
               <!-- WHERE ((L.입사일 IS NOT NULL
                AND (L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01')
                AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
                OR (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01'
                AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))-->
            </when>
        </choose>
        ),
        총점및인원데이터 AS (
        SELECT
            지점,
            SUM(총점) AS 지점_총점,
            COUNT(이름) AS 지점_전담자수
        FROM 전체점수데이터
        GROUP BY 지점
        ),
        전체통계 AS (
        SELECT
            지점,
            ROUND(지점_총점/NULLIF(지점_전담자수, 0), 2) AS 지점평균
        FROM 총점및인원데이터
        UNION ALL
        SELECT
            '평균' AS 지점,
            ROUND(SUM(지점_총점)/NULLIF(SUM(지점_전담자수), 0), 2) AS 지점평균
        FROM 총점및인원데이터
        )
        SELECT
            T.지점 dashboardBranch,
            T.지점평균 AS totalBranchScoreAVG
        FROM 전체통계 T
        JOIN 지점순서 S ON T.지점 = S.지점
        ORDER BY
        CASE WHEN T.지점 = '평균' THEN 0 ELSE 1 END,
        T.지점평균 DESC
    </select>

    <!-- 지점별 실적 데이터 실적 표 Query -->
    <select id="selectBranchTable" resultType="dashboard">
        WITH 참여자_년도별_집계 AS (
        -- 참여자 데이터를 한 번에 집계하여 서브쿼리 제거
        SELECT
            지점,
            SUM(CASE WHEN 등록년도 = YEAR(DATEADD(YEAR,-2,GETDATE())) THEN 1 ELSE 0 END) AS 참여자_2023,
            SUM(CASE WHEN 등록년도 = YEAR(DATEADD(YEAR,-1,GETDATE())) THEN 1 ELSE 0 END) AS 참여자_2024,
            SUM(CASE WHEN 등록년도 = YEAR(GETDATE()) THEN 1 ELSE 0 END) AS 참여자_2025,
            SUM(CASE WHEN 등록년도 IN (YEAR(DATEADD(YEAR,-2,GETDATE())),YEAR(DATEADD(YEAR,-1,GETDATE())), YEAR(GETDATE())) THEN 1 ELSE 0 END) AS 참여자_합계
        FROM (
        SELECT
            지점,
            YEAR(
                CASE
                    WHEN 등록일 IS NULL OR 등록일 = '' OR 등록일 <![CDATA[<=]]> '1900-01-01'
                    THEN 초기상담일
                    ELSE 등록일
                END
                ) AS 등록년도
        FROM J_참여자관리
        WHERE (등록일 IS NOT NULL AND 등록일 > '1900-01-01') OR (초기상담일 IS NOT NULL AND 초기상담일 > '1900-01-01')
        ) AS 참여자_기본
        GROUP BY 지점
        ),
        자격있는_전담자 AS (
        -- 전담자 자격 조건을 CTE로 분리하여 가독성 향상
        SELECT DISTINCT
            아이디
        FROM J_참여자관리_로그인정보
        WHERE
            근속기간구분 <![CDATA[<>]]> '1년미만'
        ),
        상담사인원 AS (
            SELECT
                지점,
                COUNT(A.아이디) 상담사총인원
            FROM J_참여자관리_로그인정보 A
            <choose>
                <!-- True 1년 미만 인원 포함 False 1년 미만 인원 미포함-->
                <when test="!dashboardFlagCondition">
                    INNER JOIN 자격있는_전담자 Q ON A.아이디 = Q.아이디
                </when>
            </choose>
            WHERE (아이디사용여부 NOT IN ('퇴사','정지','잠금') OR 아이디사용여부 IS NULL OR 아이디사용여부 = '')
            GROUP BY 지점
        )
        SELECT
            A.지점 AS dashboardBranch,
            ISNULL(P.참여자_2023, 0) AS dashboardByYearCount1,
            ISNULL(P.참여자_2024, 0) AS dashboardByYearCount2,
            ISNULL(P.참여자_2025, 0) AS dashboardByYearCount3,
            ISNULL(P.참여자_합계, 0) AS dashboardTotalCount,
            SUM(A.종료자수) AS totalCompleted,
            SUM(A.취업자만) AS totalEmployed, -- 상담사 이전 가중치 적용 취업자수
            SUM(A.특정계층취업자수) AS specialGroupCount,
            SUM(A.취업자수) AS totalEmployedSpecialGroupCount, -- 특정계층 포함 취업자수
            ROUND(SUM(A.취업률) / C.상담사총인원, 2) AS employmentRate,
            SUM(A.알선취업자수) AS referredEmploymentCount,
            ROUND(SUM(A.알선취업률) / C.상담사총인원, 2) AS placementRate,
            SUM(A.나은일자리수) AS betterJobCount,
            ROUND(SUM(A.나은일자리취업률) / C.상담사총인원, 2) AS betterJobRate,
            SUM(A.조기취업자수) AS earlyEmploymentCount,
            ROUND(SUM(A.조기취업률) / C.상담사총인원, 2) AS earlyEmploymentRate,
            ROUND(SUM(A.가중취업자점수) / C.상담사총인원, 2) AS employmentScore,
            ROUND(SUM(A.가중알선취업자점수) / C.상담사총인원, 2) AS placementScore,
            ROUND(SUM(A.가중나은취업자점수) / C.상담사총인원, 2) AS betterJobScore,
            ROUND(SUM(A.가중조기취업자점수) / C.상담사총인원, 2) AS earlyEmploymentScore,
            ROUND(SUM(A.총점) / C.상담사총인원, 2) AS totalScore
        <choose>
            <!-- True 1년 미만 인원 포함 False 1년 미만 인원 미포함-->
            <when test="dashboardFlagCondition">
                <choose>
                    <when test="!dashboardExcludeRetention">
                        FROM 고용부평가실적및점수_고용제거 A
                    </when>
                    <otherwise>
                        ,ROUND(SUM(A.가중고용취업자점수)/C.상담사총인원,2) AS retentionScore
                        FROM 고용부평가실적및점수 A
                    </otherwise>
                </choose>
            </when>
            <otherwise>
                <choose>
                    <when test="!dashboardExcludeRetention">
                        FROM 평가실적및점수_고용제거 A
                    </when>
                    <otherwise>
                        ,ROUND(SUM(A.가중고용취업자점수)/C.상담사총인원,2) AS retentionScore
                        FROM 평가실적및점수 A
                    </otherwise>
                </choose>
            </otherwise>
        </choose>
        INNER JOIN J_참여자관리_지점 B ON A.지점 = B.지점
        <choose>
            <!-- True 1년 미만 인원 포함 False 1년 미만 인원 미포함-->
            <when test="!dashboardFlagCondition">
                INNER JOIN 자격있는_전담자 Q ON A.전담자_계정 = Q.아이디
            </when>
        </choose>
        JOIN 상담사인원 C ON A.지점 = C.지점
        LEFT JOIN 참여자_년도별_집계 P ON A.지점 = P.지점
        GROUP BY
            A.지점,
            P.참여자_2023,
            P.참여자_2024,
            P.참여자_2025,
            P.참여자_합계,
            C.상담사총인원
        <include refid="sortByColumn"/>
--         ORDER BY totalScore DESC
    </select>

    <!-- 개인별 실적 데이터 실적 표 Query -->
    <select id="selectPeopleTable" resultType="dashboard">
        WITH 참여자_년도별_집계 AS (
        -- 참여자 데이터를 한 번에 집계하여 서브쿼리 제거
        SELECT
            전담자_계정,
            SUM(CASE WHEN 등록년도 = YEAR(DATEADD(YEAR,-2,GETDATE())) THEN 1 ELSE 0 END) AS 참여자_2023,
            SUM(CASE WHEN 등록년도 = YEAR(DATEADD(YEAR,-1,GETDATE())) THEN 1 ELSE 0 END) AS 참여자_2024,
            SUM(CASE WHEN 등록년도 = YEAR(GETDATE()) THEN 1 ELSE 0 END) AS 참여자_2025,
            SUM(CASE WHEN 등록년도 IN (YEAR(DATEADD(YEAR,-2,GETDATE())),YEAR(DATEADD(YEAR,-1,GETDATE())), YEAR(GETDATE())) THEN 1 ELSE 0 END) AS 참여자_합계
        FROM (
            SELECT
                전담자_계정,
                YEAR(
                    CASE
                        WHEN 등록일 IS NULL OR 등록일 = '' OR 등록일 <![CDATA[<=]]> '1900-01-01'
                        THEN 초기상담일
                        ELSE 등록일
                    END
            ) AS 등록년도
        FROM J_참여자관리
        WHERE (등록일 IS NOT NULL AND 등록일 > '1900-01-01') OR (초기상담일 IS NOT NULL AND 초기상담일 > '1900-01-01')
        ) AS 참여자_기본
        GROUP BY 전담자_계정
        ),
        자격있는_전담자 AS (
        -- 전담자 자격 조건을 CTE로 분리하여 가독성 향상
        SELECT DISTINCT
            아이디,
            이름
        FROM J_참여자관리_로그인정보
        WHERE
            (아이디사용여부 NOT IN ('퇴사','정지','잠금') OR 아이디사용여부 IS NULL OR 아이디사용여부 = '')
            <!-- True 1년 미만 인원 포함 False 1년 미만 인원 미포함-->
            <if test="!dashboardFlagCondition">
                AND 근속기간구분 <![CDATA[<>]]> '1년미만'
            </if>
        )
        SELECT
            A.이름 AS dashBoardUserName,
            A.지점 AS dashboardBranch,
            ISNULL(P.참여자_2023, 0) AS dashboardByYearCount1,
            ISNULL(P.참여자_2024, 0) AS dashboardByYearCount2,
            ISNULL(P.참여자_2025, 0) AS dashboardByYearCount3,
            ISNULL(P.참여자_합계, 0) AS dashboardTotalCount,
            SUM(A.종료자수) AS totalCompleted,
            SUM(A.취업자만) AS totalEmployed, -- 상담사 이전 가중치 적용 취업자수
            SUM(A.특정계층취업자수) AS specialGroupCount,
            SUM(A.취업자수) AS totalEmployedSpecialGroupCount, -- 특정계층 포함 취업자수
            SUM(A.취업률) AS employmentRate,
            SUM(A.알선취업자수) AS referredEmploymentCount,
            SUM(A.알선취업률) AS placementRate,
            SUM(A.나은일자리수) AS betterJobCount,
            SUM(A.나은일자리취업률) AS betterJobRate,
            SUM(A.조기취업자수) AS earlyEmploymentCount,
            SUM(A.조기취업률) AS earlyEmploymentRate,
            SUM(A.가중취업자점수) AS employmentScore,
            SUM(A.가중알선취업자점수) AS placementScore,
            SUM(A.가중나은취업자점수) AS betterJobScore,
            SUM(A.가중조기취업자점수) AS earlyEmploymentScore,
            SUM(A.총점) AS totalScore
        <choose>
            <!-- True 1년 미만 인원 포함 False 1년 미만 인원 미포함-->
            <when test="dashboardFlagCondition">
                <choose>
                    <when test="!dashboardExcludeRetention">
                        FROM 고용부평가실적및점수_고용제거 A
                    </when>
                    <otherwise>
                        ,SUM(A.가중고용취업자점수) AS retentionScore
                        FROM 고용부평가실적및점수 A
                    </otherwise>
                </choose>
            </when>
            <otherwise>
                <choose>
                    <when test="!dashboardExcludeRetention">
                        FROM 평가실적및점수_고용제거 A
                    </when>
                    <otherwise>
                        ,SUM(A.가중고용취업자점수) AS retentionScore
                        FROM 평가실적및점수 A
                    </otherwise>
                </choose>
            </otherwise>
        </choose>
        INNER JOIN 자격있는_전담자 Q ON A.전담자_계정 = Q.아이디
        LEFT JOIN 참여자_년도별_집계 P ON A.전담자_계정 = P.전담자_계정
        GROUP BY
            A.이름,
            A.지점,
            P.참여자_2023,
            P.참여자_2024,
            P.참여자_2025,
            P.참여자_합계
        <include refid="sortByColumn"/>
        --         ORDER BY totalScore DESC
    </select>

    <!-- (지점 관리자 미포함)지점별 상담사 실적 점수 데이터 -->
    <select id="selectBranchConsolScore" resultType="dashboard">
        WITH 전체점수데이터 AS (
        SELECT
        지점, 이름, 전담자_계정,
        가중취업자점수, 가중알선취업자점수,
        가중조기취업자점수, 가중나은취업자점수, 총점
        <choose>
            <when test="!dashboardExcludeRetention">
                FROM 평가실적및점수_고용제거 A
            </when>
            <otherwise>
                ,가중고용취업자점수
                FROM 평가실적및점수 A
            </otherwise>
        </choose>
        ),
        총점및인원데이터 AS (
        SELECT
        A.지점,
        SUM(
        CASE WHEN (
        (L.입사일 IS NOT NULL AND L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01' AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR
        (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365)
        ) THEN 총점
        ELSE 0 END) AS 지점_총점,
        SUM(
        CASE WHEN (
        (L.입사일 IS NOT NULL AND L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01' AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR
        (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365)
        ) THEN 1
        ELSE 0 END) AS 지점_전담자수
        FROM 전체점수데이터 A
        LEFT JOIN J_참여자관리_로그인정보 L ON A.전담자_계정 = L.아이디
        GROUP BY A.지점
        ),
        지점_통계 AS (
        SELECT
        지점,
        SUM(총점) AS 지점_총점,
        COUNT(이름) AS 지점_전담자수
        FROM 전체점수데이터
        GROUP BY 지점
        ),
        전체_평균 AS (
        SELECT
        ROUND(SUM(지점_총점)/NULLIF(SUM(지점_전담자수),0),2) 총평균
        FROM 총점및인원데이터
        ),
        지점_평균_순위 AS (
        SELECT
        T.지점,
        ROUND(T.지점_총점/NULLIF(T.지점_전담자수,0),2) AS 지점_평균,
        A.총평균
        FROM 지점_통계 T, 전체_평균 A
        ),
        순위_데이터 AS (
        SELECT
        RANK() OVER (ORDER BY D.총점 DESC) AS 전체순위,
        FLOOR(PERCENT_RANK() OVER (ORDER BY D.총점 DESC)*10000)/100 AS 순위_퍼센트,
        D.이름,
        D.전담자_계정,
        D.지점,
        D.가중취업자점수,
        D.가중알선취업자점수,
        D.가중조기취업자점수,
        <choose>
            <when test="dashboardExcludeRetention">
                D.가중고용취업자점수,
            </when>
        </choose>
        D.가중나은취업자점수,
        D.총점,
        P.지점_평균,
        P.총평균,
        CASE WHEN (
        (L.입사일 IS NOT NULL AND (L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01') AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))
        THEN '1년이상' ELSE '1년미만'
        END AS 근속기간구분
        FROM 전체점수데이터 D
        JOIN 지점_평균_순위 P ON D.지점 = P.지점
        LEFT JOIN J_참여자관리_로그인정보 L ON D.전담자_계정 = L.아이디
        WHERE L.권한 NOT IN ('팀장','총괄','본부장','이사','차장')
        )
        SELECT
        전체순위,
        이름 AS dashBoardUserName,
        전담자_계정 AS dashboardUserID,
        지점 AS dashboardBranch,
        가중취업자점수 AS employmentLastScore,
        가중알선취업자점수 AS placementLastScore,
        가중조기취업자점수 AS earlyEmploymentLastScore,
        <choose>
            <when test="dashboardExcludeRetention">
                가중고용취업자점수 AS retentionLastScore,
            </when>
        </choose>
        가중나은취업자점수 AS betterJobLastScore,
        총점 AS totalScore,
        지점_평균 AS myBranchScoreAVG,
        총평균 AS totalBranchScoreAVG
        FROM 순위_데이터
        WHERE 지점 = #{dashboardBranch}
    </select>

    <!-- (지점 관리자 포함)지점별 상담사 실적 점수 데이터 -->
    <select id="selectBranchConsolScoreManager" resultType="dashboard">
        WITH 근속기간_계산 AS (
        SELECT
            아이디,
            CASE WHEN (근속기간구분 = '1년이상') THEN 1 ELSE 0 END AS 근속1년이상여부,
            CASE WHEN (근속기간구분 = '1년이상') THEN '1년이상' ELSE '1년미만' END AS 근속기간구분
        FROM J_참여자관리_로그인정보
        ),
        기본데이터 AS (
        SELECT
            A.지점, A.이름, A.전담자_계정,
            A.가중취업자점수, A.가중알선취업자점수, A.가중조기취업자점수,
            A.가중나은취업자점수, A.총점,
            <!-- MyBatis 조건부 처리 -->
            <choose>
                <when test="!dashboardExcludeRetention">
                    0 AS 가중고용취업자점수  -- 고용제거 테이블 사용시
                </when>
                <otherwise>
                    A.가중고용취업자점수     -- 일반 테이블 사용시
                </otherwise>
            </choose>,
            ISNULL(L.근속1년이상여부, 0) AS 근속1년이상여부,
            ISNULL(L.근속기간구분, '1년미만') AS 근속기간구분
        FROM
        <choose>
            <when test="!dashboardExcludeRetention">
                평가실적및점수_고용제거 A
            </when>
            <otherwise>
                평가실적및점수 A
            </otherwise>
        </choose>
        LEFT JOIN 근속기간_계산 L ON A.전담자_계정 = L.아이디
        WHERE A.지점 = #{dashboardBranch}  -- 조기 필터링으로 데이터셋 축소
        ),
        집계데이터 AS (
        SELECT
            지점,
            SUM(CASE WHEN 근속1년이상여부 = 1 THEN 총점 ELSE 0 END) AS 지점_총점,
            SUM(CASE WHEN 근속1년이상여부 = 1 THEN 1 ELSE 0 END) AS 지점_전담자수,
            COUNT(*) AS 전체_전담자수,
            SUM(총점) AS 전체_총점
        FROM 기본데이터
        GROUP BY 지점
        ),
        전체평균 AS (
        SELECT
            ROUND(SUM(지점_총점) * 1.0 / NULLIF(SUM(지점_전담자수), 0), 2) AS 총평균
        FROM 집계데이터
        ),
        지점평균 AS (
        SELECT
            지점,
            ROUND(지점_총점 * 1.0 / NULLIF(지점_전담자수, 0), 2) AS 지점_평균
        FROM 집계데이터
        WHERE 지점 = #{dashboardBranch}
        )
        SELECT
            RANK() OVER (ORDER BY B.총점 DESC) AS 전체순위,
            FLOOR(PERCENT_RANK() OVER (ORDER BY B.총점 DESC) * 10000) / 100 AS 순위_퍼센트,
            B.이름 AS dashBoardUserName,
            B.전담자_계정 AS dashboardUserID,
            B.지점 AS dashboardBranch,
            B.가중취업자점수 AS employmentLastScore,
            B.가중알선취업자점수 AS placementLastScore,
            B.가중조기취업자점수 AS earlyEmploymentLastScore,
            <choose>
                <when test="dashboardExcludeRetention">
                    B.가중고용취업자점수 AS retentionLastScore,
                </when>
            </choose>
            B.가중나은취업자점수 AS betterJobLastScore,
            B.총점 AS totalScore,
            J.지점_평균 AS myBranchScoreAVG,
            T.총평균 AS totalBranchScoreAVG
        FROM 기본데이터 B
        CROSS JOIN 전체평균 T
        INNER JOIN 지점평균 J ON B.지점 = J.지점;
    </select>

    <!-- 지점별 상담사 상위 20% 실적 점수 데이터 -->
    <select id="selectTopConsolScore" resultType="dashboard">
        WITH
        전체점수데이터 AS (
        SELECT
        지점,
        이름,
        전담자_계정,
        가중취업자점수,
        가중알선취업자점수,
        가중조기취업자점수,
        가중나은취업자점수,
        총점
        <choose>
            <when test="!dashboardExcludeRetention">
                FROM 평가실적및점수_고용제거 A
            </when>
            <otherwise>
                ,가중고용취업자점수
                FROM 평가실적및점수 A
            </otherwise>
        </choose>
        ),
        총점및인원데이터 AS (
        SELECT
        A.지점,
        SUM(CASE WHEN (
        (L.입사일 IS NOT NULL AND L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01' AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR
        (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))
        THEN 총점 ELSE 0 END) AS 지점_총점,
        SUM(CASE WHEN (
        (L.입사일 IS NOT NULL AND L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01' AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR
        (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))
        THEN 1 ELSE 0 END) AS 지점_전담자수
        FROM 전체점수데이터 A
        LEFT JOIN J_참여자관리_로그인정보 L ON A.전담자_계정 = L.아이디
        GROUP BY A.지점
        ),
        지점_통계 AS (
        SELECT
        지점,
        SUM(총점) AS 지점_총점,
        COUNT(이름) AS 지점_전담자수
        FROM 전체점수데이터
        GROUP BY 지점
        ),
        전체_평균 AS (
        SELECT
        ROUND(SUM(지점_총점)/NULLIF(SUM(지점_전담자수),0),2) 총평균
        FROM 총점및인원데이터
        ),
        지점_평균_순위 AS (
        SELECT
        T.지점,
        ROUND(T.지점_총점/NULLIF(T.지점_전담자수,0),2) AS 지점_평균,
        A.총평균
        FROM 지점_통계 T, 전체_평균 A
        ),
        순위_데이터 AS (
        SELECT
        RANK() OVER (ORDER BY D.총점 DESC) AS 전체순위,
        FLOOR(PERCENT_RANK() OVER (ORDER BY D.총점 DESC)*10000)/100 AS 순위_퍼센트,
        D.이름,
        D.전담자_계정,
        D.지점,
        D.가중취업자점수,
        D.가중알선취업자점수,
        D.가중조기취업자점수,
        <choose>
            <when test="dashboardExcludeRetention">
                D.가중고용취업자점수,
            </when>
        </choose>
        D.가중나은취업자점수,
        D.총점,
        P.지점_평균,
        P.총평균,
        CASE WHEN (
        (L.입사일 IS NOT NULL AND (L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01') AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))
        THEN '1년이상'
        ELSE '1년미만'
        END AS 근속기간구분
        FROM 전체점수데이터 D
        JOIN 지점_평균_순위 P ON D.지점 = P.지점
        LEFT JOIN J_참여자관리_로그인정보 L ON D.전담자_계정 = L.아이디
        ),
        통계_정보 AS (
        SELECT
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 총점 END),2) AS 총평균,
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중취업자점수 END),2) AS 상위20퍼센트_취업자평균,
        ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중취업자점수 END),2) AS 전체_취업자평균,
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중알선취업자점수 END),2) AS 상위20퍼센트_알선평균,
        ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중알선취업자점수 END),2) AS 전체_알선평균,
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중조기취업자점수 END),2) AS 상위20퍼센트_조기평균,
        ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중조기취업자점수 END),2) AS 전체_조기평균,
        <choose>
            <when test="dashboardExcludeRetention">
                ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중고용취업자점수 END),2) AS 상위20퍼센트_고용평균,
                ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중고용취업자점수 END),2) AS 전체_고용평균,
            </when>
        </choose>
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중나은취업자점수 END),2) AS 상위20퍼센트_나은평균,
        ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중나은취업자점수 END),2) AS 전체_나은평균
        FROM 순위_데이터
        )
        SELECT
        총평균 AS totalStandardScore,
        상위20퍼센트_취업자평균 AS employmentTopScore,
        전체_취업자평균 AS employmentLastScore,
        상위20퍼센트_알선평균 AS placementTopScore,
        전체_알선평균 AS placementLastScore,
        상위20퍼센트_조기평균 AS earlyEmploymentTopScore,
        전체_조기평균 AS earlyEmploymentLastScore,
        <choose>
            <when test="dashboardExcludeRetention">
                상위20퍼센트_고용평균 AS retentionTopScore,
                전체_고용평균 AS retentionLastScore,
            </when>
        </choose>
        상위20퍼센트_나은평균 AS betterJobTopScore,
        전체_나은평균 AS betterJobLastScore
        FROM 통계_정보
    </select>


    <!-- (지점 관리자 미포함)고용부 기준 지점별 상담사 실적 점수 데이터 -->
    <select id="selectBranchConsolScorePerformance" resultType="dashboard">
        WITH 전체점수데이터 AS (
        SELECT
        지점, 이름, 전담자_계정,
        가중취업자점수, 가중알선취업자점수,
        가중조기취업자점수, 가중나은취업자점수, 총점
        <choose>
            <when test="!dashboardExcludeRetention">
                FROM 고용부평가실적및점수_고용제거 A
            </when>
            <otherwise>
                ,가중고용취업자점수
                FROM 고용부평가실적및점수 A
            </otherwise>
        </choose>
        ),
        총점및인원데이터 AS (
        SELECT
        A.지점,
        SUM(
        CASE WHEN (
        (L.입사일 IS NOT NULL AND L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01' AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR
        (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365)
        ) THEN 총점
        ELSE 0 END) AS 지점_총점,
        SUM(
        CASE WHEN (
        (L.입사일 IS NOT NULL AND L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01' AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR
        (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365)
        ) THEN 1
        ELSE 0 END) AS 지점_전담자수
        FROM 전체점수데이터 A
        LEFT JOIN J_참여자관리_로그인정보 L ON A.전담자_계정 = L.아이디
        WHERE 권한 NOT IN ('팀장','총괄','본부장','이사','차장')
        GROUP BY A.지점
        ),
        지점_통계 AS (
        SELECT
        지점,
        SUM(총점) AS 지점_총점,
        COUNT(이름) AS 지점_전담자수
        FROM 전체점수데이터
        GROUP BY 지점
        ),
        전체_평균 AS (
        SELECT
        ROUND(SUM(지점_총점)/NULLIF(SUM(지점_전담자수),0),2) 총평균
        FROM 총점및인원데이터
        ),
        지점_평균_순위 AS (
        SELECT
        T.지점,
        ROUND(T.지점_총점/NULLIF(T.지점_전담자수,0),2) AS 지점_평균,
        A.총평균
        FROM 지점_통계 T, 전체_평균 A
        ),
        순위_데이터 AS (
        SELECT
        RANK() OVER (ORDER BY D.총점 DESC) AS 전체순위,
        FLOOR(PERCENT_RANK() OVER (ORDER BY D.총점 DESC)*10000)/100 AS 순위_퍼센트,
        D.이름,
        D.전담자_계정,
        D.지점,
        D.가중취업자점수,
        D.가중알선취업자점수,
        D.가중조기취업자점수,
        <choose>
            <when test="dashboardExcludeRetention">
                D.가중고용취업자점수,
            </when>
        </choose>
        D.가중나은취업자점수,
        D.총점,
        P.지점_평균,
        P.총평균,
        CASE WHEN (
        (L.입사일 IS NOT NULL AND (L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01') AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))
        THEN '1년이상' ELSE '1년미만'
        END AS 근속기간구분
        FROM 전체점수데이터 D
        JOIN 지점_평균_순위 P ON D.지점 = P.지점
        LEFT JOIN J_참여자관리_로그인정보 L ON D.전담자_계정 = L.아이디
        WHERE L.권한 NOT IN ('팀장','총괄','본부장','이사','차장')
        )
        SELECT
        전체순위,
        이름 AS dashBoardUserName,
        전담자_계정 AS dashboardUserID,
        지점 AS dashboardBranch,
        가중취업자점수 AS employmentLastScore,
        가중알선취업자점수 AS placementLastScore,
        가중조기취업자점수 AS earlyEmploymentLastScore,
        <choose>
            <when test="dashboardExcludeRetention">
                가중고용취업자점수 AS retentionLastScore,
            </when>
        </choose>
        가중나은취업자점수 AS betterJobLastScore,
        총점 AS totalScore,
        지점_평균 AS myBranchScoreAVG,
        총평균 AS totalBranchScoreAVG
        FROM 순위_데이터
        WHERE 지점 = #{dashboardBranch}
    </select>

    <!-- (지점 관리자 포함)고용부 기준 지점별 상담사 실적 점수 데이터 -->
    <select id="selectBranchConsolScorePerformanceManager" resultType="dashboard">
        WITH 전체점수데이터 AS (
        SELECT
        지점, 이름, 전담자_계정,
        가중취업자점수, 가중알선취업자점수,
        가중조기취업자점수, 가중나은취업자점수, 총점
        <choose>
            <when test="!dashboardExcludeRetention">
                FROM 고용부평가실적및점수_고용제거 A
            </when>
            <otherwise>
                ,가중고용취업자점수
                FROM 고용부평가실적및점수 A
            </otherwise>
        </choose>
        ),
        총점및인원데이터 AS (
        SELECT
        A.지점,
        SUM(
        CASE WHEN (
        (L.입사일 IS NOT NULL AND L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01' AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR
        (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365)
        ) THEN 총점
        ELSE 0 END) AS 지점_총점,
        SUM(
        CASE WHEN (
        (L.입사일 IS NOT NULL AND L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01' AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR
        (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365)
        ) THEN 1
        ELSE 0 END) AS 지점_전담자수
        FROM 전체점수데이터 A
        LEFT JOIN J_참여자관리_로그인정보 L ON A.전담자_계정 = L.아이디
        GROUP BY A.지점
        ),
        지점_통계 AS (
        SELECT
        지점,
        SUM(총점) AS 지점_총점,
        COUNT(이름) AS 지점_전담자수
        FROM 전체점수데이터
        GROUP BY 지점
        ),
        전체_평균 AS (
        SELECT
        ROUND(SUM(지점_총점)/NULLIF(SUM(지점_전담자수),0),2) 총평균
        FROM 총점및인원데이터
        ),
        지점_평균_순위 AS (
        SELECT
        T.지점,
        ROUND(T.지점_총점/NULLIF(T.지점_전담자수,0),2) AS 지점_평균,
        A.총평균
        FROM 지점_통계 T, 전체_평균 A
        ),
        순위_데이터 AS (
        SELECT
        RANK() OVER (ORDER BY D.총점 DESC) AS 전체순위,
        FLOOR(PERCENT_RANK() OVER (ORDER BY D.총점 DESC)*10000)/100 AS 순위_퍼센트,
        D.이름,
        D.전담자_계정,
        D.지점,
        D.가중취업자점수,
        D.가중알선취업자점수,
        D.가중조기취업자점수,
        <choose>
            <when test="dashboardExcludeRetention">
                D.가중고용취업자점수,
            </when>
        </choose>
        D.가중나은취업자점수,
        D.총점,
        P.지점_평균,
        P.총평균,
        CASE WHEN (
        (L.입사일 IS NOT NULL AND (L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01') AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))
        THEN '1년이상' ELSE '1년미만'
        END AS 근속기간구분
        FROM 전체점수데이터 D
        JOIN 지점_평균_순위 P ON D.지점 = P.지점
        LEFT JOIN J_참여자관리_로그인정보 L ON D.전담자_계정 = L.아이디
        )
        SELECT
        전체순위,
        이름 AS dashBoardUserName,
        전담자_계정 AS dashboardUserID,
        지점 AS dashboardBranch,
        가중취업자점수 AS employmentLastScore,
        가중알선취업자점수 AS placementLastScore,
        가중조기취업자점수 AS earlyEmploymentLastScore,
        <choose>
            <when test="dashboardExcludeRetention">
                가중고용취업자점수 AS retentionLastScore,
            </when>
        </choose>
        가중나은취업자점수 AS betterJobLastScore,
        총점 AS totalScore,
        지점_평균 AS myBranchScoreAVG,
        총평균 AS totalBranchScoreAVG
        FROM 순위_데이터
        WHERE 지점 = #{dashboardBranch}
    </select>

    <!-- 고용부 기준 지점별 상담사 상위 20% 실적 점수 데이터 -->
    <select id="selectTopConsolScorePerformance" resultType="dashboard">
        WITH
        전체점수데이터 AS (
        SELECT
        지점,
        이름,
        전담자_계정,
        가중취업자점수,
        가중알선취업자점수,
        가중조기취업자점수,
        가중나은취업자점수,
        총점
        <choose>
            <when test="!dashboardExcludeRetention">
                FROM 고용부평가실적및점수_고용제거 A
            </when>
            <otherwise>
                ,가중고용취업자점수
                FROM 고용부평가실적및점수 A
            </otherwise>
        </choose>
        ),
        총점및인원데이터 AS (
        SELECT
        A.지점,
        SUM(CASE WHEN (
        (L.입사일 IS NOT NULL AND L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01' AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR
        (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))
        THEN 총점 ELSE 0 END) AS 지점_총점,
        SUM(CASE WHEN (
        (L.입사일 IS NOT NULL AND L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01' AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR
        (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))
        THEN 1 ELSE 0 END) AS 지점_전담자수
        FROM 전체점수데이터 A
        LEFT JOIN J_참여자관리_로그인정보 L ON A.전담자_계정 = L.아이디
        GROUP BY A.지점
        ),
        지점_통계 AS (
        SELECT
        지점,
        SUM(총점) AS 지점_총점,
        COUNT(이름) AS 지점_전담자수
        FROM 전체점수데이터
        GROUP BY 지점
        ),
        전체_평균 AS (
        SELECT
        ROUND(SUM(지점_총점)/NULLIF(SUM(지점_전담자수),0),2) 총평균
        FROM 총점및인원데이터
        ),
        지점_평균_순위 AS (
        SELECT
        T.지점,
        ROUND(T.지점_총점/NULLIF(T.지점_전담자수,0),2) AS 지점_평균,
        A.총평균
        FROM 지점_통계 T, 전체_평균 A
        ),
        순위_데이터 AS (
        SELECT
        RANK() OVER (ORDER BY D.총점 DESC) AS 전체순위,
        FLOOR(PERCENT_RANK() OVER (ORDER BY D.총점 DESC)*10000)/100 AS 순위_퍼센트,
        D.이름,
        D.전담자_계정,
        D.지점,
        D.가중취업자점수,
        D.가중알선취업자점수,
        D.가중조기취업자점수,
        <choose>
            <when test="dashboardExcludeRetention">
                D.가중고용취업자점수,
            </when>
        </choose>
        D.가중나은취업자점수,
        D.총점,
        P.지점_평균,
        P.총평균,
        CASE WHEN (
        (L.입사일 IS NOT NULL AND (L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01') AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))
        THEN '1년이상'
        ELSE '1년미만'
        END AS 근속기간구분
        FROM 전체점수데이터 D
        JOIN 지점_평균_순위 P ON D.지점 = P.지점
        LEFT JOIN J_참여자관리_로그인정보 L ON D.전담자_계정 = L.아이디
        ),
        통계_정보 AS (
        SELECT
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 총점 END),2) AS 총평균,
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중취업자점수 END),2) AS 상위20퍼센트_취업자평균,
        ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중취업자점수 END),2) AS 전체_취업자평균,
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중알선취업자점수 END),2) AS 상위20퍼센트_알선평균,
        ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중알선취업자점수 END),2) AS 전체_알선평균,
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중조기취업자점수 END),2) AS 상위20퍼센트_조기평균,
        ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중조기취업자점수 END),2) AS 전체_조기평균,
        <choose>
            <when test="dashboardExcludeRetention">
                ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중고용취업자점수 END),2) AS 상위20퍼센트_고용평균,
                ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중고용취업자점수 END),2) AS 전체_고용평균,
            </when>
        </choose>
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중나은취업자점수 END),2) AS 상위20퍼센트_나은평균,
        ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중나은취업자점수 END),2) AS 전체_나은평균
        FROM 순위_데이터
        )
        SELECT
        총평균 AS totalStandardScore,
        상위20퍼센트_취업자평균 AS employmentTopScore,
        전체_취업자평균 AS employmentLastScore,
        상위20퍼센트_알선평균 AS placementTopScore,
        전체_알선평균 AS placementLastScore,
        상위20퍼센트_조기평균 AS earlyEmploymentTopScore,
        전체_조기평균 AS earlyEmploymentLastScore,
        <choose>
            <when test="dashboardExcludeRetention">
                상위20퍼센트_고용평균 AS retentionTopScore,
                전체_고용평균 AS retentionLastScore,
            </when>
        </choose>
        상위20퍼센트_나은평균 AS betterJobTopScore,
        전체_나은평균 AS betterJobLastScore
        FROM 통계_정보
    </select>
</mapper>