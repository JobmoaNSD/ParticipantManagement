<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="DashboardDAO">
    <!-- Main DashBoard 시작 -->
    <select id="myKPIDashboard" resultType="dashboard">
        SELECT
            지점 AS dashboardBranch,
            전담자_계정 AS dashboardUserID,
            종료자수 AS totalCompleted,
            취업자수 AS totalEmployed,
            취업률 AS employmentRate,
            알선취업자수 AS referredEmploymentCount,
            알선취업률 AS placementRate,
            조기취업자수 AS earlyEmploymentCount,
            조기취업률 AS earlyEmploymentRate,
            나은일자리수 AS betterJobCount,
            나은일자리률 AS betterJobRate,
            배정인원수 AS assignedParticipants,
            서비스미제공 AS noServiceCount,
            미해당 AS falseCaseNum,
            해당 AS trueCaseNum
        FROM
            KPI달성률
        WHERE
            전담자_계정 = #{dashboardUserID}
    </select>
<!--    &lt;!&ndash; Dashboard 조회 쿼리 시작 &ndash;&gt;-->
<!--    <select id="selectMyResultDashboard" resultType="dashboard">-->
<!--        SELECT-->
<!--            &#45;&#45; 취업자 수 Query 조건-->
<!--            ISNULL(SUM(IIF(YEAR(취창업일) = YEAR(#{dashBoardYear}), 1, 0)), 0) AS dashBoardEmployedCountTotal,-->
<!--            ISNULL(SUM(IIF(지점 = #{dashboardBranch} AND YEAR(취창업일) = YEAR(#{dashBoardYear}), 1, 0)),0) AS dashBoardEmployedCountBranch,-->
<!--            ISNULL(SUM(IIF(전담자_계정 = #{dashboardUserID} AND 지점 = #{dashboardBranch} AND YEAR(취창업일) = YEAR(#{dashBoardYear}), 1, 0)),0) AS dashBoardEmployedCountUser,-->
<!--            &#45;&#45; 알선 취업자 수 Query 조건-->
<!--            ISNULL(SUM(IIF(취업유형 != '' AND 취업유형 IN ('알선', '소개취업'), 1, 0)), 0) AS dashBoardReferredEmployedCountTotal,-->
<!--            ISNULL(SUM(IIF(지점 = #{dashboardBranch} AND 취업유형 != '' AND 취업유형 IN ('알선', '소개취업'), 1, 0)),0) AS dashBoardReferredEmployedCountBranch,-->
<!--            ISNULL(SUM(IIF(전담자_계정 = #{dashboardUserID} AND 지점 = #{dashboardBranch} AND 취업유형 != '' AND 취업유형 IN ('알선', '소개취업'), 1, 0)),0) AS dashBoardReferredEmployedCountUser,-->
<!--            &#45;&#45; 조기 취업자 수 Query 조건-->
<!--            ISNULL(SUM(IIF(DATEDIFF(mm, 초기상담일, 취창업일) IN (0, 1, 2, 3, 4, 5), 1, 0)),0) AS dashBoardEarlyEmployedCountTotal,-->
<!--            ISNULL(SUM(IIF(지점 = #{dashboardBranch} AND DATEDIFF(mm, 초기상담일, 취창업일) IN (0, 1, 2, 3, 4, 5), 1, 0)),0) AS dashBoardEarlyEmployedCountBranch,-->
<!--            ISNULL(SUM(IIF(전담자_계정 = #{dashboardUserID} AND 지점 = #{dashboardBranch} AND DATEDIFF(mm, 초기상담일, 취창업일) IN (0, 1, 2, 3, 4, 5), 1, 0)),0) AS dashBoardEarlyEmployedCountUser,-->
<!--            &#45;&#45; 나은일자리 수 Query 조건-->
<!--            ISNULL(SUM(IIF((FLOOR(임금) <![CDATA[>=]]> 229) AND 진행단계 = '고보일반', 1, 0)), 0) AS dashBoardBetterJobCountTotal,-->
<!--            ISNULL(SUM(IIF(지점 = #{dashboardBranch} AND (FLOOR(임금)  <![CDATA[>=]]> 229) AND 진행단계 = '고보일반', 1, 0)),0) AS dashBoardBetterJobCountBranch,-->
<!--            ISNULL(SUM(IIF(전담자_계정 = #{dashboardUserID} AND 지점 = #{dashboardBranch} AND (FLOOR(임금) <![CDATA[>=]]> 229) AND 진행단계 = '고보일반', 1, 0)),0) AS dashBoardBetterJobCountUser,-->
<!--            &#45;&#45; 고용유지 6개월 수 Query 조건-->
<!--            ISNULL(SUM(IIF(진행단계 = '고보일반' AND-->
<!--                           DATEDIFF(mm, 취창업일, (IIF(퇴사일 = '', GETDATE(), 퇴사일))) <![CDATA[>=]]> 6 AND-->
<!--                           DATEDIFF(mm, 취창업일, (IIF(퇴사일 = '', GETDATE(), 퇴사일))) <![CDATA[<=]]> 11, 1, 0)),0) AS dashBoardSixMonthRetentionCountTotal,-->
<!--            ISNULL(SUM(IIF(지점 = #{dashboardBranch} AND 진행단계 = '고보일반' AND-->
<!--                           DATEDIFF(mm, 취창업일, (IIF(퇴사일 = '', GETDATE(), 퇴사일))) <![CDATA[>=]]> 6 AND-->
<!--                           DATEDIFF(mm, 취창업일, (IIF(퇴사일 = '', GETDATE(), 퇴사일))) <![CDATA[<=]]> 11, 1, 0)),0) AS dashBoardSixMonthRetentionCountBranch,-->
<!--            ISNULL(SUM(IIF(전담자_계정 = #{dashboardUserID} AND 지점 = #{dashboardBranch} AND 진행단계 = '고보일반' AND-->
<!--                           DATEDIFF(mm, 취창업일, (IIF(퇴사일 = '', GETDATE(), 퇴사일))) <![CDATA[>=]]> 6 AND-->
<!--                           DATEDIFF(mm, 취창업일, (IIF(퇴사일 = '', GETDATE(), 퇴사일))) <![CDATA[<=]]> 11, 1, 0)),0) AS dashBoardSixMonthRetentionCountUser,-->
<!--            &#45;&#45; 고용유지 12개월 수 Query 조건-->
<!--            ISNULL(SUM(IIF(진행단계 = '고보일반' AND-->
<!--                           DATEDIFF(mm, 취창업일, (IIF(퇴사일 = '', GETDATE(), 퇴사일))) <![CDATA[>=]]> 12, 1, 0)),0) AS dashBoardTwelveMonthRetentionCountTotal,-->
<!--            ISNULL(SUM(IIF(지점 = #{dashboardBranch} AND 진행단계 = '고보일반' AND-->
<!--                           DATEDIFF(mm, 취창업일, (IIF(퇴사일 = '', GETDATE(), 퇴사일))) <![CDATA[>=]]> 12, 1, 0)),0) AS dashBoardTwelveMonthRetentionCountBranch,-->
<!--            ISNULL(SUM(IIF(전담자_계정 = #{dashboardUserID} AND 지점 = #{dashboardBranch} AND 진행단계 = '고보일반' AND-->
<!--                           DATEDIFF(mm, 취창업일, (IIF(퇴사일 = '', GETDATE(), 퇴사일))) <![CDATA[>=]]> 12, 1, 0)),0) AS dashBoardTwelveMonthRetentionCountUser-->
<!--        FROM J_참여자관리-->
<!--        WHERE YEAR(등록일) = YEAR(#{dashBoardYear})-->
<!--          AND 취창업일 != '';-->
<!--    </select>-->

    <!-- 성공금 데이터 추출 시작 -->
    <!-- 성공금 개인 데이터 추출 시작 -->
    <select id="selectSuccessMoney" resultType="dashboard">
        SELECT
            -- 전체 성공금 인센티브
            ISNULL(SUM(CONVERT(BIGINT, 성공금)),0)                                       AS dashBoardSuccessMoneyTotal,
            ISNULL(SUM(CONVERT(BIGINT, 인센티브)),0)                                      AS dashBoardSuccessMoneyTotalIncentive,
            -- 지점 성공금 인센티브
            ISNULL(SUM(IIF(지점 = #{dashboardBranch}, CONVERT(BIGINT, 성공금), 0)),0)      AS dashBoardSuccessMoneyBranch,
            ISNULL(SUM(IIF(지점 = #{dashboardBranch}, CONVERT(BIGINT, 인센티브), 0)),0)     AS dashBoardSuccessMoneyBranchIncentive,
            -- 개인 성공금 인센티브
            ISNULL(SUM(IIF(전담자_계정 = #{dashboardUserID} AND 지점 = #{dashboardBranch}, CONVERT(BIGINT, 성공금), 0)),0)  AS dashBoardSuccessMoneyUser,
            ISNULL(SUM(IIF(전담자_계정 = #{dashboardUserID} AND 지점 = #{dashboardBranch}, CONVERT(BIGINT, 인센티브), 0)),0) AS dashBoardSuccessMoneyUserIncentive
        FROM SUCCESSMONEY
        WHERE YEAR(등록일) = #{dashBoardYear};
    </select>
    <!-- 성공금 데이터 추출 끝 -->


    <!-- 전체 지점 인원, 현재 지점 인원 -->
    <select id="selectBranchAndUser" resultType="dashboard">
        SELECT
            (SELECT
                 SUM(지점인원)
             FROM
                 J_참여자관리_지점) AS dashboardCountBranch,
            지점인원 AS dashboardCountUser
        FROM
            J_참여자관리_지점
        WHERE 지점 = #{dashboardBranch};
    </select>

<!--    &lt;!&ndash; 전담자 개인 참여자 인원 &ndash;&gt;-->
<!--    <select id="selectCountDashboard" resultType="dashboard">-->
<!--        SELECT-->
<!--            COUNT(구직번호) dashboardTotalCount-->
<!--        FROM-->
<!--            J_참여자관리-->
<!--        WHERE-->
<!--            전담자_계정 = #{dashboardUserID} AND 지점 = #{dashboardBranch}-->
<!--          AND-->
<!--            YEAR(등록일) = #{dashBoardYear}-->
<!--    </select>-->

<!--    &lt;!&ndash; 전담자 개인 마감 참여자 인원 &ndash;&gt;-->
<!--    <select id="selectCountCloseDashboard" resultType="dashboard">-->
<!--        SELECT-->
<!--            COUNT(구직번호) dashboardCloseCount-->
<!--        FROM-->
<!--            J_참여자관리-->
<!--        WHERE-->
<!--            전담자_계정 = #{dashboardUserID} AND 지점 = #{dashboardBranch}-->
<!--          AND-->
<!--            YEAR(등록일) = #{dashBoardYear}-->
<!--          AND-->
<!--            마감 = 'true'-->
<!--    </select>-->
    <!-- Dashboard 조회 쿼리 끝 -->

    <!-- 참여자 통계 현재 참여자 수 시작 -->
    <select id="selectTotalParticipant" resultType="dashboard">
        SELECT
            COUNT(등록일) dashBoardParticipatedCountOne,
            (SELECT COUNT(구직번호) FROM J_참여자관리 WHERE 전담자_계정 = #{dashboardUserID}) dashBoardParticipatedCountTotal,
            YEAR(등록일) dashBoardParticipatedYear
        FROM
            J_참여자관리
        WHERE
            전담자_계정=#{dashboardUserID} AND
            지점 = #{dashboardBranch} AND
            YEAR(등록일) <![CDATA[<=]]> #{dashBoardYear}
        GROUP BY YEAR(등록일)
        ORDER BY YEAR(등록일) DESC
    </select>
    <!-- 참여자 통계 현재 참여자 수 끝 -->

    <!-- 참여자 통계 현재 진행자 수 시작 -->
    <select id="selectCurrentParticipant" resultType="dashboard">
        SELECT
            COUNT(등록일) dashBoardParticipatedCountOne,
            (SELECT COUNT(구직번호) FROM J_참여자관리 WHERE 전담자_계정 = #{dashboardUserID} AND 마감 = 'false' AND 진행단계 IN ('1', '2', '3', '미취업사후관리', 'IAP 전', 'IAP 후','유예')) dashBoardParticipatedCountTotal,
            YEAR(등록일) dashBoardParticipatedYear
        FROM
            J_참여자관리
        WHERE
            전담자_계정=#{dashboardUserID} AND
            지점 = #{dashboardBranch} AND
            마감 = 'false' AND
            진행단계 IN ('1','2','3','미취업사후관리','IAP 전','IAP 후','유예') AND
            YEAR(등록일) <![CDATA[<=]]> #{dashBoardYear}
        GROUP BY YEAR(등록일)
        ORDER BY YEAR(등록일) DESC
    </select>
    <!-- 참여자 통계 현재 진행자 수 끝 -->

    <!-- 참여자 통계 현재 년도 참여자 수 시작 -->
    <select id="selectNowParticipant" resultType="dashboard">
        SELECT
            ISNULL(SUM(IIF(참여유형 = '1', 1, 0)), 0) AS dashBoardParticipatedCountOne,
            ISNULL(SUM(IIF(참여유형 = '2', 1, 0)), 0) AS dashBoardParticipatedCountTwo,
            COUNT(구직번호) AS dashBoardParticipatedCountTotal,
            YEAR(등록일) AS dashBoardParticipatedYear
        FROM J_참여자관리
        WHERE 전담자_계정 = #{dashboardUserID} AND 지점 = #{dashboardBranch}
          AND 마감 = 'false'
          AND 진행단계 IN ('1','2','3','미취업사후관리','IAP 전','IAP 후','유예')
          AND YEAR(등록일) <![CDATA[=]]> #{dashBoardYear}
        GROUP BY YEAR(등록일)
        ORDER BY YEAR(등록일) DESC
    </select>
    <!-- 참여자 통계 현재 년도 참여자 수 끝 -->

    <!-- 전담자 금일 업무 현황 시작 -->
    <select id="selectDailyDashboard" resultType="dashboard">
        --21일 기준 최근상담일,
        --15일 기준 구직만료일, 기간만료일 전체 데이터
        SELECT
            -- 최근 상담일 21일 도래자
            SUM(IIF(DATEDIFF(DAY, 최근상담일, GETDATE()) <![CDATA[>=]]> 21 AND 최근상담일 <![CDATA[<>]]> '', 1, 0)) AS dashBoardLastCons,
            -- 구직 만료일 15일 도래자
            SUM(IIF(DATEDIFF(DAY, GETDATE(), 구직만료일) <![CDATA[<=]]> 15 AND 구직만료일 <![CDATA[<>]]> '', 1, 0)) AS dashBoardJobEX,
            -- 기간 만료일 15일 도래자
            SUM(IIF(DATEDIFF(DAY, GETDATE(), 기간만료일) <![CDATA[<=]]> 15 AND 기간만료일 <![CDATA[<>]]> '' AND 최근상담일 <![CDATA[<>]]> '', 1, 0))                           AS dashBoardEXPDate,
            -- 초기상담 미실시자
            SUM(IIF(초기상담일 = '', 1, 0)) AS dashBoardInItCons
        FROM J_참여자관리
        WHERE 전담자_계정 = #{dashboardUserID}
          AND 지점 = #{dashboardBranch}
          AND (마감 = 'false' OR 마감 = '')
    </select>
    <!-- 전담자 금일 업무 현황 끝 -->

    <!-- 성공금 현황 시작 -->
    <select id="selectSuccessMoneyDetails" resultType="dashboard">
        SELECT TOP(100)
            A.구직번호 AS dashBoardJobNo,
            A.등록일 AS dashBoardDate,
            A.참여자 AS dashBoardPartic,
            A.전담자_계정 AS dashBoardUserID,
            B.이름 AS dashBoardUserName,
            A.지점 AS dashBoardUserBranch,
            A.성공금 AS dashBoardSuccessMoney,
            A.인센티브 AS dashBoardIncentive
        FROM SUCCESSMONEY A
                 RIGHT JOIN J_참여자관리_로그인정보 B
                            ON A.전담자_계정 = B.아이디
        WHERE
            A.성공금 <![CDATA[<>]]> '' AND
            A.전담자_계정 = #{dashboardUserID} AND
            A.지점=#{dashBoardUserBranch};
    </select>
    <!-- 성공금 현황 끝 -->

    <!-- 지점 관리자 대시보드 지점별 성공금 현황 시작 -->
    <select id="selectBranchManagementMoney" resultType="dashboard">
        SELECT ISNULL(A.지점, '전체 지점')                                     AS dashboardBranch,
               ISNULL(SUM(IIF(취창업일 <![CDATA[>=]]> DATEADD(YEAR, -1, #{dashBoardStartDate}) AND 취창업일 <![CDATA[<=]]> DATEADD(YEAR, -1, #{dashBoardEndDate}),
                              ISNULL(CONVERT(BIGINT, 성공금), 0), 0)),0) AS lastYearMoney,
               ISNULL(SUM(IIF(취창업일 <![CDATA[>=]]> #{dashBoardStartDate} AND 취창업일 <![CDATA[<=]]> #{dashBoardEndDate},
                              ISNULL(CONVERT(BIGINT, 성공금), 0), 0)), 0) AS currentYearMoney
        FROM SUCCESSMONEY A
                 RIGHT JOIN J_참여자관리_지점 B
                            ON A.지점 = B.지점
        WHERE A.지점 <![CDATA[<>]]> '테스트'
        GROUP BY A.지점 WITH ROLLUP
        ORDER BY IIF(A.지점 IS NULL, 0, 1);
    </select>
    <!-- 지점 관리자 대시보드 지점별 성공금 현황 끝 -->

    <!-- 지점 관리자 대시보드 지점별 인센 현황 시작 -->
    <select id="selectBranchInventiveStatus" resultType="dashboard">
        SELECT
            ISNULL(A.지점, '전체 지점') AS dashboardBranch,
            ISNULL(SUM(IIF(취업인센티브_구분 LIKE '%해당%',1,0)),0) AS trueCaseNum,
            ISNULL(SUM(IIF(취업인센티브_구분 LIKE '%미해당%' AND 취업인센티브_구분 NOT LIKE '%서비스 미제공%',1,0)),0) AS falseCaseNum,
            ISNULL(SUM(IIF(취업인센티브_구분 LIKE '%서비스 미제공%',1,0)),0) AS noServiceCount
        FROM
            SUCCESSMONEY A
                RIGHT JOIN J_참여자관리_지점 B
                           ON A.지점 = B.지점
        WHERE A.지점 <![CDATA[<>]]> '테스트' AND
            취창업일 <![CDATA[>=]]> #{dashBoardStartDate} AND 취창업일 <![CDATA[<=]]> #{dashBoardEndDate}
        GROUP BY A.지점 WITH ROLLUP
        ORDER BY IIF(A.지점 IS NULL, 0, 1);
    </select>
    <!-- 지점 관리자 대시보드 지점별 인센 현황 끝 -->

    <!-- 지점 관리자 대시보드 지점별 인센 미해당 현황 시작 -->
    <select id="selectBranchInventiveFalseStatus" resultType="dashboard">
        SELECT
            ISNULL(B.사업부,'전체 지점'),
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%서비스 미제공%' THEN 1 ELSE 0 END) as noServiceCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%1개월 미만 퇴사%' THEN 1 ELSE 0 END) as lessThanOneMonthCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%파견업체%' THEN 1 ELSE 0 END) as dispatchCompanyCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%IAP수립 후 7일이내 취업%' THEN 1 ELSE 0 END) as iapSevenDaysCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%주 30시간 미만%' THEN 1 ELSE 0 END) as underThirtyHoursCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%최저임금 미만%' THEN 1 ELSE 0 END) as underMinWageCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%기타(해외취업포함)%' THEN 1 ELSE 0 END) as etcCount
        FROM SUCCESSMONEY A
                 RIGHT JOIN J_참여자관리_지점 B
                            ON A.지점 = B.지점
        WHERE
            A.지점 <![CDATA[<>]]> '테스트' AND
            A.취창업일 <![CDATA[>=]]> #{dashBoardStartDate}
          AND A.취창업일 <![CDATA[<=]]> #{dashBoardEndDate}
          AND B.사업부 <![CDATA[<>]]> ''
          AND A.취업인센티브_구분 LIKE '%미해당%'
        GROUP BY B.사업부 WITH ROLLUP
        ORDER BY B.사업부
    </select>
    <!-- 지점 관리자 대시보드 지점별 인센 현황 끝 -->


    <!-- 비동기 지점 상담사별 성공금 금액 확인용 쿼리 -->
    <select id="selectCounselSuccessMoney" resultType="dashboard">
        SELECT
            A.지점 AS dashBoardUserBranch,
            B.이름 AS dashBoardUserName,
            ISNULL(SUM(A.성공금),0) AS dashBoardSuccessMoney
        FROM
            SUCCESSMONEY A
                RIGHT JOIN
            J_참여자관리_로그인정보 B
            ON A.전담자_계정 = B.아이디
        WHERE
            A.취창업일 <![CDATA[>=]]> #{dashBoardStartDate} AND A.취창업일 <![CDATA[<=]]> #{dashBoardEndDate}
          AND A.지점 = #{dashboardBranch}
        GROUP BY A.지점,B.이름
    </select>
    <!-- 비동기 지점 상담사별 성공금 금액 확인용 쿼리 -->

    <!-- 비동기 지점 관리자 대시보드 지점별 인센 미해당 현황 시작 -->
    <select id="selectAjaxBranchInventiveFalseStatus" resultType="dashboard">
        SELECT
            A.지점 as dashboardBranch,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%서비스 미제공%' THEN 1 ELSE 0 END) as noServiceCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%1개월 미만 퇴사%' THEN 1 ELSE 0 END) as lessThanOneMonthCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%파견업체%' THEN 1 ELSE 0 END) as dispatchCompanyCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%IAP수립 후 7일이내 취업%' THEN 1 ELSE 0 END) as iapSevenDaysCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%주 30시간 미만%' THEN 1 ELSE 0 END) as underThirtyHoursCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%최저임금 미만%' THEN 1 ELSE 0 END) as underMinWageCount,
            SUM(CASE WHEN A.취업인센티브_구분 LIKE '%기타(해외취업포함)%' THEN 1 ELSE 0 END) as etcCount
        FROM SUCCESSMONEY A
                 RIGHT JOIN J_참여자관리_지점 B
                            ON A.지점 = B.지점
        WHERE
            A.취창업일 <![CDATA[>=]]> #{dashBoardStartDate} AND A.취창업일 <![CDATA[<=]]> #{dashBoardEndDate}
          AND A.지점 <![CDATA[<>]]> '테스트'
          AND B.사업부 <![CDATA[<>]]> '' AND B.사업부 <![CDATA[=]]> #{businessUnit}
          AND A.취업인센티브_구분 LIKE '%미해당%'
        GROUP BY A.지점
        ORDER BY A.지점 DESC
    </select>
    <!-- 비동기 지점 관리자 대시보드 지점별 인센 미해당 현황 끝 -->

    <!-- 전체, 지점, 내 점수 및 등수 시작 -->
    <!-- 내 점수 및 지점 평균, 총점 평균 출력 -->
    <select id="selectRankAndScore" resultType="dashboard">
        -- 전체지점, 내 지점, 내 점수 구하는 쿼리
        WITH 개인점수데이터 AS (
            SELECT
                A.지점,
                A.이름,
                A.전담자_계정,
                A.종료자수,
                A.취업자수,
                A.특정계층취업자수,
                A.취업률,
                A.인당취업자점수,
                A.알선취업자수,
                A.알선취업률,
                A.인당알선취업자수,
                A.조기취업자수,
                A.조기취업률,
                A.인당조기취업자수,
                A.고용유지자수,
                A.고용유지취업률,
                A.인당고용유지점수,
                A.나은일자리수,
                A.나은일자리취업률,
                A.인당나은일자리점수,
                A.가중취업자점수,
                A.가중알선취업자점수,
                A.가중조기취업자점수,
                A.가중고용취업자점수,
                A.가중나은취업자점수,
                A.총점
            FROM 평가실적및점수 A
                     JOIN J_참여자관리_로그인정보 L ON A.전담자_계정 = L.아이디
            WHERE A.전담자_계정 = #{dashboardUserID}
        ),
             전체점수데이터 AS (
                 SELECT
                     A.지점,
                     A.이름,
                     A.전담자_계정,
                     A.종료자수,
                     A.취업자수,
                     A.특정계층취업자수,
                     A.취업률,
                     A.인당취업자점수,
                     A.알선취업자수,
                     A.알선취업률,
                     A.인당알선취업자수,
                     A.조기취업자수,
                     A.조기취업률,
                     A.인당조기취업자수,
                     A.고용유지자수,
                     A.고용유지취업률,
                     A.인당고용유지점수,
                     A.나은일자리수,
                     A.나은일자리취업률,
                     A.인당나은일자리점수,
                     A.가중취업자점수,
                     A.가중알선취업자점수,
                     A.가중조기취업자점수,
                     A.가중고용취업자점수,
                     A.가중나은취업자점수,
                     A.총점
                 FROM 평가실적및점수 A
                          JOIN J_참여자관리_로그인정보 L ON A.전담자_계정 = L.아이디
                 WHERE ((L.입사일 IS NOT NULL
                     AND (L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01')
                     AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
                     OR (L.최종발령일 IS NOT NULL
                         AND L.최종발령일 > '1900-01-01'
                         AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))
             ),
             순위_데이터 AS (
                 SELECT
                     전담자_계정,
                     총점,
                     지점,
                     RANK() OVER (ORDER BY 총점 DESC) AS 전체순위,
                     RANK() OVER (PARTITION BY 지점 ORDER BY 총점 DESC) AS 지점내순위
                 FROM 전체점수데이터
             ),
             통계_요약 AS (
                 SELECT
                     AVG(t.총점) AS 전체지점평균,
                     SUM(t.총점) AS 전체지점합계,
                     COUNT(*) AS 전체인원수,
                     MAX(i.총점) AS 내_점수,
                     MAX(i.지점) AS 내_지점,
                     MAX(CASE WHEN r.전담자_계정 = #{dashboardUserID} THEN r.전체순위 END) AS 내_전체순위,
                     MAX(CASE WHEN r.전담자_계정 = #{dashboardUserID} THEN r.지점내순위 END) AS 내_지점순위
                 FROM 전체점수데이터 t
                          CROSS JOIN 개인점수데이터 i
                          LEFT JOIN 순위_데이터 r ON r.전담자_계정 = #{dashboardUserID}
             ),
             내_지점_통계 AS (
                 SELECT
                     AVG(총점) AS 내지점평균,
                     SUM(총점) AS 내지점합계,
                     COUNT(*) AS 지점인원수
                 FROM 전체점수데이터
                 WHERE 지점 = (SELECT 내_지점 FROM 통계_요약)
             )
        SELECT
            NULLIF(t.내_점수,0) AS myScore,
            NULLIF(t.전체지점합계,0) AS totalBranchScore,
            NULLIF(ROUND(t.전체지점평균, 2),0) AS totalBranchScoreAVG,
            NULLIF(j.내지점합계,0) AS myBranchScore,
            NULLIF(ROUND(j.내지점평균, 2),0) AS myBranchScoreAVG,
            CONCAT(NULLIF(t.내_전체순위,0) , '/' , NULLIF(t.전체인원수,0)) AS myTotalRanking,
            CONCAT(NULLIF(t.내_지점순위,0) , '/' , NULLIF(j.지점인원수,0)) AS myBranchRanking,
            CASE
                WHEN t.내_점수 >= 72 THEN 'A'
                WHEN t.내_점수 >= 54 THEN 'B'
                WHEN t.내_점수 >= 31 THEN 'C'
                WHEN t.내_점수 >= 18 THEN 'D'
                ELSE 'E'
                END AS myRanking
        FROM 통계_요약 t
                 CROSS JOIN 내_지점_통계 j
    </select>

    <!-- 내 점수 및 인원수, 인원비율 출력 -->
    <select id="selectScoreAndAvg" resultType="dashboard">
        SELECT
            A.지점 AS dashboardBranch,
            A.이름 AS dashboardUserName,
            A.전담자_계정 AS dashboardUserID,
            A.종료자수 AS totalCompleted,
            A.취업자수 AS totalEmployed,
            A.특정계층취업자수 AS specialGroupCount,
            A.취업률 AS employmentRate,
            A.인당취업자점수 AS employmentOneScore,
            A.알선취업자수 AS referredEmploymentCount,
            A.알선취업률 AS placementRate,
            A.인당알선취업자수 AS placementOneScore,
            A.조기취업자수 AS earlyEmploymentCount,
            A.조기취업률 AS earlyEmploymentRate,
            A.인당조기취업자수 AS earlyEmploymentOneScore,
            A.고용유지자수 AS retentionCount,
            A.고용유지취업률 AS retentionRate,
            A.인당고용유지점수 AS retentionOneScore,
            A.나은일자리수 AS betterJobCount,
            A.나은일자리취업률 AS betterJobRate,
            A.인당나은일자리점수 AS betterJobOneScore,
            A.가중취업자점수 AS employmentLastScore,
            A.가중알선취업자점수 AS placementLastScore,
            A.가중조기취업자점수 AS earlyEmploymentLastScore,
            A.가중고용취업자점수 AS retentionLastScore,
            A.가중나은취업자점수 AS betterJobLastScore,
            A.총점 AS totalScore
        FROM 평가실적및점수 A
        WHERE
            A.전담자_계정 =  #{dashboardUserID}
    </select>
    <!-- 지점 평균 및 총점 평균 출력 (1년 미만 상담사 미포함) -->
    <select id="selectBranchAvg" resultType="dashboard">
        WITH 지점순서 AS (
        SELECT 지점, 순서 FROM J_참여자관리_지점
        UNION ALL
        SELECT '평균' AS 지점, 0 AS 순서
        ),
        전체점수데이터 AS (
        SELECT
        A.지점,
        A.이름,
        A.전담자_계정,
        A.총점
        <choose>
            <when test="!dashboardExcludeRetention">
                FROM 평가실적및점수_고용제거 A
            </when>
            <otherwise>
                FROM 평가실적및점수 A
            </otherwise>
        </choose>
        JOIN J_참여자관리_로그인정보 L ON A.전담자_계정 = L.아이디
        WHERE ((L.입사일 IS NOT NULL
        AND (L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01')
        AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01'
        AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))
        ),
        총점및인원데이터 AS (
        SELECT
        지점,
        SUM(총점) AS 지점_총점,
        COUNT(이름) AS 지점_전담자수
        FROM 전체점수데이터
        GROUP BY 지점
        ),
        전체통계 AS (
        SELECT
        지점,
        ROUND(지점_총점/NULLIF(지점_전담자수, 0), 2) AS 지점평균
        FROM 총점및인원데이터
        UNION ALL
        SELECT
        '평균' AS 지점,
        ROUND(SUM(지점_총점)/NULLIF(SUM(지점_전담자수), 0), 2) AS 지점평균
        FROM 총점및인원데이터
        )
        SELECT
        T.지점 dashboardBranch,
        T.지점평균 AS totalBranchScoreAVG
        FROM 전체통계 T
        JOIN 지점순서 S ON T.지점 = S.지점
        ORDER BY
        CASE WHEN T.지점 = '평균' THEN 0 ELSE 1 END,
        T.지점평균 DESC
    </select>

    <!-- 지점 평균 및 총점 평균 출력 (1년 미만 상담사 포함)-->
    <select id="scoreBranchPerformanceAjax" resultType="dashboard">
        WITH 지점순서 AS (
            SELECT 지점, 순서 FROM J_참여자관리_지점
            UNION ALL
            SELECT '평균' AS 지점, 0 AS 순서
        ),
        전체점수데이터 AS (
            SELECT
                A.지점,
                A.이름,
                A.전담자_계정,
                A.총점
                <choose>
                    <when test="!dashboardExcludeRetention">
                        FROM 고용부평가실적및점수_고용제거 A
                    </when>
                    <otherwise>
                        FROM 고용부평가실적및점수 A
                    </otherwise>
                </choose>
            JOIN J_참여자관리_로그인정보 L
            ON A.전담자_계정 = L.아이디
        ),
        총점및인원데이터 AS (
            SELECT
                지점,
                SUM(총점) AS 지점_총점,
                COUNT(이름) AS 지점_전담자수
            FROM 전체점수데이터
            GROUP BY 지점
        ),
        전체통계 AS (
        SELECT
            지점,
            ROUND(지점_총점/NULLIF(지점_전담자수, 0), 2) AS 지점평균
            FROM 총점및인원데이터
        UNION ALL
        SELECT
            '평균' AS 지점,
            ROUND(SUM(지점_총점)/NULLIF(SUM(지점_전담자수), 0), 2) AS 지점평균
        FROM 총점및인원데이터
        )
            SELECT
            T.지점 dashboardBranch,
            T.지점평균 AS totalBranchScoreAVG
        FROM 전체통계 T
        JOIN 지점순서 S ON T.지점 = S.지점
        ORDER BY
        CASE WHEN T.지점 = '평균' THEN 0 ELSE 1 END,
        T.지점평균 DESC
    </select>

    <!-- 지점별 상담사 실적 점수 데이터 -->
    <select id="selectBranchConsolScore" resultType="dashboard">
        WITH 전체점수데이터 AS (
            SELECT
            지점, 이름, 전담자_계정,
            가중취업자점수, 가중알선취업자점수,
            가중조기취업자점수, 가중나은취업자점수, 총점
            <choose>
                <when test="!dashboardExcludeRetention">
                    FROM 평가실적및점수_고용제거 A
                </when>
                <otherwise>
                    ,가중고용취업자점수
                    FROM 평가실적및점수 A
                </otherwise>
            </choose>
        ),
        총점및인원데이터 AS (
        SELECT
            A.지점,
            SUM(
            CASE WHEN (
            (L.입사일 IS NOT NULL AND L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01' AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
            OR
            (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365)
            ) THEN 총점
            ELSE 0 END) AS 지점_총점,
            SUM(
            CASE WHEN (
            (L.입사일 IS NOT NULL AND L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01' AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
            OR
            (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365)
            ) THEN 1
            ELSE 0 END) AS 지점_전담자수
            FROM 전체점수데이터 A
            LEFT JOIN J_참여자관리_로그인정보 L ON A.전담자_계정 = L.아이디
            GROUP BY A.지점
        ),
        지점_통계 AS (
        SELECT
            지점,
            SUM(총점) AS 지점_총점,
            COUNT(이름) AS 지점_전담자수
            FROM 전체점수데이터
            GROUP BY 지점
        ),
        전체_평균 AS (
            SELECT
            ROUND(SUM(지점_총점)/NULLIF(SUM(지점_전담자수),0),2) 총평균
            FROM 총점및인원데이터
        ),
        지점_평균_순위 AS (
            SELECT
            T.지점,
            ROUND(T.지점_총점/NULLIF(T.지점_전담자수,0),2) AS 지점_평균,
            A.총평균
            FROM 지점_통계 T, 전체_평균 A
        ),
        순위_데이터 AS (
        SELECT
            RANK() OVER (ORDER BY D.총점 DESC) AS 전체순위,
            FLOOR(PERCENT_RANK() OVER (ORDER BY D.총점 DESC)*10000)/100 AS 순위_퍼센트,
            D.이름,
            D.전담자_계정,
            D.지점,
            D.가중취업자점수,
            D.가중알선취업자점수,
            D.가중조기취업자점수,
            <choose>
                <when test="dashboardExcludeRetention">
                    D.가중고용취업자점수,
                </when>
            </choose>
            D.가중나은취업자점수,
            D.총점,
            P.지점_평균,
            P.총평균,
            CASE WHEN (
            (L.입사일 IS NOT NULL AND (L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01') AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
            OR (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))
            THEN '1년이상' ELSE '1년미만'
            END AS 근속기간구분
            FROM 전체점수데이터 D
            JOIN 지점_평균_순위 P ON D.지점 = P.지점
            LEFT JOIN J_참여자관리_로그인정보 L ON D.전담자_계정 = L.아이디
        )
        SELECT
            전체순위,
            이름 AS dashBoardUserName,
            전담자_계정 AS dashboardUserID,
            지점 AS dashboardBranch,
            가중취업자점수 AS employmentLastScore,
            가중알선취업자점수 AS placementLastScore,
            가중조기취업자점수 AS earlyEmploymentLastScore,
            <choose>
                <when test="dashboardExcludeRetention">
                    가중고용취업자점수 AS retentionLastScore,
                </when>
            </choose>
            가중나은취업자점수 AS betterJobLastScore,
            총점 AS totalScore,
            지점_평균 AS myBranchScoreAVG,
            총평균 AS totalBranchScoreAVG
        FROM 순위_데이터
        WHERE 지점 = #{dashboardBranch}
    </select>

    <!-- 지점별 상담사 상위 20% 실적 점수 데이터 -->
    <select id="selectTopConsolScore" resultType="dashboard">
        WITH
        전체점수데이터 AS (
        SELECT
        지점,
        이름,
        전담자_계정,
        가중취업자점수,
        가중알선취업자점수,
        가중조기취업자점수,
        가중나은취업자점수,
        총점
        <choose>
            <when test="!dashboardExcludeRetention">
                FROM 평가실적및점수_고용제거 A
            </when>
            <otherwise>
                ,가중고용취업자점수
                FROM 평가실적및점수 A
            </otherwise>
        </choose>
        ),
        총점및인원데이터 AS (
        SELECT
        A.지점,
        SUM(CASE WHEN (
        (L.입사일 IS NOT NULL AND L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01' AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR
        (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))
        THEN 총점 ELSE 0 END) AS 지점_총점,
        SUM(CASE WHEN (
        (L.입사일 IS NOT NULL AND L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01' AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR
        (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))
        THEN 1 ELSE 0 END) AS 지점_전담자수
        FROM 전체점수데이터 A
        LEFT JOIN J_참여자관리_로그인정보 L ON A.전담자_계정 = L.아이디
        GROUP BY A.지점
        ),
        지점_통계 AS (
        SELECT
        지점,
        SUM(총점) AS 지점_총점,
        COUNT(이름) AS 지점_전담자수
        FROM 전체점수데이터
        GROUP BY 지점
        ),
        전체_평균 AS (
        SELECT
        ROUND(SUM(지점_총점)/NULLIF(SUM(지점_전담자수),0),2) 총평균
        FROM 총점및인원데이터
        ),
        지점_평균_순위 AS (
        SELECT
        T.지점,
        ROUND(T.지점_총점/NULLIF(T.지점_전담자수,0),2) AS 지점_평균,
        A.총평균
        FROM 지점_통계 T, 전체_평균 A
        ),
        순위_데이터 AS (
        SELECT
        RANK() OVER (ORDER BY D.총점 DESC) AS 전체순위,
        FLOOR(PERCENT_RANK() OVER (ORDER BY D.총점 DESC)*10000)/100 AS 순위_퍼센트,
        D.이름,
        D.전담자_계정,
        D.지점,
        D.가중취업자점수,
        D.가중알선취업자점수,
        D.가중조기취업자점수,
        <choose>
            <when test="dashboardExcludeRetention">
                D.가중고용취업자점수,
            </when>
        </choose>
        D.가중나은취업자점수,
        D.총점,
        P.지점_평균,
        P.총평균,
        CASE WHEN (
        (L.입사일 IS NOT NULL AND (L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01') AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))
        THEN '1년이상'
        ELSE '1년미만'
        END AS 근속기간구분
        FROM 전체점수데이터 D
        JOIN 지점_평균_순위 P ON D.지점 = P.지점
        LEFT JOIN J_참여자관리_로그인정보 L ON D.전담자_계정 = L.아이디
        ),
        통계_정보 AS (
        SELECT
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 총점 END),2) AS 총평균,
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중취업자점수 END),2) AS 상위20퍼센트_취업자평균,
        ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중취업자점수 END),2) AS 전체_취업자평균,
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중알선취업자점수 END),2) AS 상위20퍼센트_알선평균,
        ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중알선취업자점수 END),2) AS 전체_알선평균,
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중조기취업자점수 END),2) AS 상위20퍼센트_조기평균,
        ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중조기취업자점수 END),2) AS 전체_조기평균,
        <choose>
            <when test="dashboardExcludeRetention">
                ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중고용취업자점수 END),2) AS 상위20퍼센트_고용평균,
                ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중고용취업자점수 END),2) AS 전체_고용평균,
            </when>
        </choose>
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중나은취업자점수 END),2) AS 상위20퍼센트_나은평균,
        ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중나은취업자점수 END),2) AS 전체_나은평균
        FROM 순위_데이터
        )
        SELECT
        총평균 AS totalStandardScore,
        상위20퍼센트_취업자평균 AS employmentTopScore,
        전체_취업자평균 AS employmentLastScore,
        상위20퍼센트_알선평균 AS placementTopScore,
        전체_알선평균 AS placementLastScore,
        상위20퍼센트_조기평균 AS earlyEmploymentTopScore,
        전체_조기평균 AS earlyEmploymentLastScore,
        <choose>
            <when test="dashboardExcludeRetention">
                상위20퍼센트_고용평균 AS retentionTopScore,
                전체_고용평균 AS retentionLastScore,
            </when>
        </choose>
        상위20퍼센트_나은평균 AS betterJobTopScore,
        전체_나은평균 AS betterJobLastScore
        FROM 통계_정보
    </select>


    <!-- 고용부 기준 지점별 상담사 실적 점수 데이터 -->
    <select id="selectBranchConsolScorePerformance" resultType="dashboard">
        WITH 전체점수데이터 AS (
            SELECT
                지점, 이름, 전담자_계정,
                가중취업자점수, 가중알선취업자점수,
                가중조기취업자점수, 가중나은취업자점수, 총점
                <choose>
                    <when test="!dashboardExcludeRetention">
                        FROM 고용부평가실적및점수_고용제거 A
                    </when>
                    <otherwise>
                        ,가중고용취업자점수
                        FROM 고용부평가실적및점수 A
                    </otherwise>
                </choose>
                ),
                총점및인원데이터 AS (
                SELECT
                A.지점,
                SUM(
                CASE WHEN (
                (L.입사일 IS NOT NULL AND L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01' AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
                OR
                (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365)
                ) THEN 총점
                ELSE 0 END) AS 지점_총점,
                SUM(
                CASE WHEN (
                (L.입사일 IS NOT NULL AND L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01' AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
                OR
                (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365)
                ) THEN 1
                ELSE 0 END) AS 지점_전담자수
            FROM 전체점수데이터 A
            LEFT JOIN J_참여자관리_로그인정보 L ON A.전담자_계정 = L.아이디
            GROUP BY A.지점
        ),
        지점_통계 AS (
            SELECT
                지점,
                SUM(총점) AS 지점_총점,
                COUNT(이름) AS 지점_전담자수
                FROM 전체점수데이터
                GROUP BY 지점
                ),
                전체_평균 AS (
                SELECT
                ROUND(SUM(지점_총점)/NULLIF(SUM(지점_전담자수),0),2) 총평균
            FROM 총점및인원데이터
        ),
        지점_평균_순위 AS (
            SELECT
            T.지점,
            ROUND(T.지점_총점/NULLIF(T.지점_전담자수,0),2) AS 지점_평균,
            A.총평균
        FROM 지점_통계 T, 전체_평균 A
        ),
        순위_데이터 AS (
            SELECT
            RANK() OVER (ORDER BY D.총점 DESC) AS 전체순위,
            FLOOR(PERCENT_RANK() OVER (ORDER BY D.총점 DESC)*10000)/100 AS 순위_퍼센트,
            D.이름,
            D.전담자_계정,
            D.지점,
            D.가중취업자점수,
            D.가중알선취업자점수,
            D.가중조기취업자점수,
            <choose>
                <when test="dashboardExcludeRetention">
                    D.가중고용취업자점수,
                </when>
            </choose>
            D.가중나은취업자점수,
            D.총점,
            P.지점_평균,
            P.총평균,
            CASE WHEN (
            (L.입사일 IS NOT NULL AND (L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01') AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
            OR (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))
            THEN '1년이상' ELSE '1년미만'
            END AS 근속기간구분
        FROM 전체점수데이터 D
        JOIN 지점_평균_순위 P ON D.지점 = P.지점
        LEFT JOIN J_참여자관리_로그인정보 L ON D.전담자_계정 = L.아이디
        )
        SELECT
            전체순위,
            이름 AS dashBoardUserName,
            전담자_계정 AS dashboardUserID,
            지점 AS dashboardBranch,
            가중취업자점수 AS employmentLastScore,
            가중알선취업자점수 AS placementLastScore,
            가중조기취업자점수 AS earlyEmploymentLastScore,
            <choose>
                <when test="dashboardExcludeRetention">
                    가중고용취업자점수 AS retentionLastScore,
                </when>
            </choose>
            가중나은취업자점수 AS betterJobLastScore,
            총점 AS totalScore,
            지점_평균 AS myBranchScoreAVG,
            총평균 AS totalBranchScoreAVG
        FROM 순위_데이터
        WHERE 지점 = #{dashboardBranch}
    </select>

    <!-- 고용부 기준 지점별 상담사 상위 20% 실적 점수 데이터 -->
    <select id="selectTopConsolScorePerformance" resultType="dashboard">
        WITH
        전체점수데이터 AS (
        SELECT
        지점,
        이름,
        전담자_계정,
        가중취업자점수,
        가중알선취업자점수,
        가중조기취업자점수,
        가중나은취업자점수,
        총점
        <choose>
            <when test="!dashboardExcludeRetention">
                FROM 고용부평가실적및점수_고용제거 A
            </when>
            <otherwise>
                ,가중고용취업자점수
                FROM 고용부평가실적및점수 A
            </otherwise>
        </choose>
        ),
        총점및인원데이터 AS (
        SELECT
        A.지점,
        SUM(CASE WHEN (
        (L.입사일 IS NOT NULL AND L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01' AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR
        (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))
        THEN 총점 ELSE 0 END) AS 지점_총점,
        SUM(CASE WHEN (
        (L.입사일 IS NOT NULL AND L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01' AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR
        (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))
        THEN 1 ELSE 0 END) AS 지점_전담자수
        FROM 전체점수데이터 A
        LEFT JOIN J_참여자관리_로그인정보 L ON A.전담자_계정 = L.아이디
        GROUP BY A.지점
        ),
        지점_통계 AS (
        SELECT
        지점,
        SUM(총점) AS 지점_총점,
        COUNT(이름) AS 지점_전담자수
        FROM 전체점수데이터
        GROUP BY 지점
        ),
        전체_평균 AS (
        SELECT
        ROUND(SUM(지점_총점)/NULLIF(SUM(지점_전담자수),0),2) 총평균
        FROM 총점및인원데이터
        ),
        지점_평균_순위 AS (
        SELECT
        T.지점,
        ROUND(T.지점_총점/NULLIF(T.지점_전담자수,0),2) AS 지점_평균,
        A.총평균
        FROM 지점_통계 T, 전체_평균 A
        ),
        순위_데이터 AS (
        SELECT
        RANK() OVER (ORDER BY D.총점 DESC) AS 전체순위,
        FLOOR(PERCENT_RANK() OVER (ORDER BY D.총점 DESC)*10000)/100 AS 순위_퍼센트,
        D.이름,
        D.전담자_계정,
        D.지점,
        D.가중취업자점수,
        D.가중알선취업자점수,
        D.가중조기취업자점수,
        <choose>
            <when test="dashboardExcludeRetention">
                D.가중고용취업자점수,
            </when>
        </choose>
        D.가중나은취업자점수,
        D.총점,
        P.지점_평균,
        P.총평균,
        CASE WHEN (
        (L.입사일 IS NOT NULL AND (L.입사일 > '1900-01-01' AND L.최종발령일 <![CDATA[<=]]> '1900-01-01') AND DATEDIFF(DAY, L.입사일, GETDATE()) >= 365)
        OR (L.최종발령일 IS NOT NULL AND L.최종발령일 > '1900-01-01' AND DATEDIFF(DAY, L.최종발령일, GETDATE()) >= 365))
        THEN '1년이상'
        ELSE '1년미만'
        END AS 근속기간구분
        FROM 전체점수데이터 D
        JOIN 지점_평균_순위 P ON D.지점 = P.지점
        LEFT JOIN J_참여자관리_로그인정보 L ON D.전담자_계정 = L.아이디
        ),
        통계_정보 AS (
        SELECT
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 총점 END),2) AS 총평균,
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중취업자점수 END),2) AS 상위20퍼센트_취업자평균,
        ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중취업자점수 END),2) AS 전체_취업자평균,
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중알선취업자점수 END),2) AS 상위20퍼센트_알선평균,
        ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중알선취업자점수 END),2) AS 전체_알선평균,
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중조기취업자점수 END),2) AS 상위20퍼센트_조기평균,
        ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중조기취업자점수 END),2) AS 전체_조기평균,
        <choose>
            <when test="dashboardExcludeRetention">
                ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중고용취업자점수 END),2) AS 상위20퍼센트_고용평균,
                ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중고용취업자점수 END),2) AS 전체_고용평균,
            </when>
        </choose>
        ROUND(AVG(CASE WHEN 순위_퍼센트 <![CDATA[<=]]> 20 AND 근속기간구분 = '1년이상' THEN 가중나은취업자점수 END),2) AS 상위20퍼센트_나은평균,
        ROUND(AVG(CASE WHEN 근속기간구분 = '1년이상' THEN 가중나은취업자점수 END),2) AS 전체_나은평균
        FROM 순위_데이터
        )
        SELECT
        총평균 AS totalStandardScore,
        상위20퍼센트_취업자평균 AS employmentTopScore,
        전체_취업자평균 AS employmentLastScore,
        상위20퍼센트_알선평균 AS placementTopScore,
        전체_알선평균 AS placementLastScore,
        상위20퍼센트_조기평균 AS earlyEmploymentTopScore,
        전체_조기평균 AS earlyEmploymentLastScore,
        <choose>
            <when test="dashboardExcludeRetention">
                상위20퍼센트_고용평균 AS retentionTopScore,
                전체_고용평균 AS retentionLastScore,
            </when>
        </choose>
        상위20퍼센트_나은평균 AS betterJobTopScore,
        전체_나은평균 AS betterJobLastScore
        FROM 통계_정보
    </select>
</mapper>